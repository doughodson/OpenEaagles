//------------------------------------------------------------------------------
// Class: Arbiter
//------------------------------------------------------------------------------
#ifndef __Eaagles_Basic_Ubf_Arbiter_H__
#define __Eaagles_Basic_Ubf_Arbiter_H__

#include "Behavior.h"

namespace Eaagles {

namespace Basic { 
   class List;

namespace Ubf {
   class State;
   class Action;

//------------------------------------------------------------------------------
// Class: Arbiter
//
// Description:
//    A meta-behavior that generates a "complex action" based on the actions
//    generated by component behaviors. Component behaviors can return null
//    actions. Action selection defaults to simple priority arbiting.
//
// Form name: UbfArbiter
// Slots:
//    behaviors   <PairStream>      ! behaviors
//------------------------------------------------------------------------------
class Arbiter : public Behavior
{
   DECLARE_SUBCLASS(Arbiter, Behavior)

public:
   Arbiter();

   // generate action based on current state
   virtual Action* genAction(const State* const state, const LCreal dt);

protected:
   // evaluates a list of actions and creates an action
   virtual Action* genComplexAction(const List* const actionSet);

   // add new behavior to list
   void addBehavior(Behavior* const);
   Basic::List* getBehaviors() const;

   // slot functions
   bool setSlotBehaviors(Basic::PairStream* const);

private:
   Basic::List* behaviors;
};

inline Basic::List* Arbiter::getBehaviors() const      { return behaviors; }

} // End Ubf namespace
} // End Basic namespace
} // End Eaagles namespace

#endif

