// simple analog vertical gauge with color breakpoints
// send it UPDATE_INSTRUMENTS 
// Analog Gauge is an instrument that knows how to draw from left to right or top to bottom, based on a value.  It is a lot like an AnalogDial, only instead of rotating, it
// draws a nice bar graph to graphically represent a given value.
gauge:  
( AnalogGauge
    // this is the gauge outline
    color: white
    transform: ( Translation -5 -3 )
    // Left boundary and right boundary are slots that tell us how big to draw our gauge width.  This can be as big or as small as you want it to be.
    leftBoundary: -0.25
    rightBoundary: 0.25
    // We are using this analog gauge as the outline for the inner bar, so we tell it to just draw the outline by setting our outlined flag.
    outlined: 1
    linewidth: 3
    // Our scaling table works a little different here than for a dial, because we are translating towards or away from a certain unit, instead of rotating a certain degree
    scalingTable: 
        ( Table1
            // our input value ranges from 1 to 100
            x: [ 0 100 ]
            // the amount that we translate to and draw back from can be from 0 to 10 units.  (Remember that our ortho is 10.5 to -10.5, take this into consideration when setting this up)
            data: [ 0 10 ]
        )
    
    components: {
        // here is filled in portion of the gauge.  Notice it doesn't have the "outline:" slot flag.  This is because we are drawing the inner portion of 
        // the bar graph
        ( AnalogGauge
            vertical: 1
            color: ( ColorRotary
                        breakpoints: {
                            0 
                            50 
                            90
                        }
                        breakcolors: {
                            (rgb 1 0 0)
                            (rgb 1 1 0)
                            (rgb 0 0 1)
                        }
                    )
            scalingTable: 
                ( Table1
                    x: [ 0 100 ]
                data: [ 0 10 ]
                )
                leftBoundary: -0.24
                rightBoundary: 0.24
        )
        // here is the maximum line
        ( Line
            color: green
            linewidth: 2
            vertices: { [ -0.5 5 ] [ 0.5 5 ] }
        )
        // here is the outline
        ( LineLoop
            color: green
            linewidth: 2
            vertices: {
                [ -0.5 0 ] 
                [  0.5 0 ]
                [  0.5 10 ]
                [ -0.5 10 ]
            }
        )
    
        // tick marks - Again, these are like dial tick marks, only they draw from left to right or bottom to top instead of around a circle.  
        ( TickMarks
            // move up one to start
            //transform: ( Translation 0 1 )
            // This slot tells us that we should draw vertically.  This is default to 1, but we set it here to show how to change it.  
            vertical: 1
            // Amount of tick marks to draw
            quantity: 10
            // How big is the gauge?  We have to play with this value to
            gaugeLength: 9
            tickLength: 0.5
            color: 
                ( ColorRotary
                    breakpoints: {
                        0 
                        50
                        90
                    }
                    breakcolors: {
                        (rgb 1 0 0)
                        (rgb 1 1 0)
                        (rgb 0 0 1)
                    }
                )
        )
        // this shows a gauge slider, which will go up and down with the value of the scale
        // This object is a little complex when you first look at it, but it really consists of two parts
        // 1) GaugeSlider is basically an object that will translate its components either left or right or
        // up or down, depending on a given value.  This is different from analog gauge in the fact that it doesn't
        // draw anything, but instead moves to that graphically representative value.  This way we can create
        // components that can be unique and do their own thing.
        // 2) Instrument, which is owned by GuageSlider, also gets the value, and uses the color rotary to determine
        // what color its components will be.  In this case, the components are a numeric readout giving us the numeric
        // value of our gauge.
        // The result of this is a graphic that moves up and down with the gauges value, and labels the actual value of 
        // the gauge in the color determined by the instrument.  This way we can change the numeric value color along with 
        // the gauge color.
        ( GaugeSlider
            vertical: 1
            scalingTable:
                ( Table1
                    x: [ 0 100 ]
                    data: [ 0 10 ]
                )
            
            components: {
                ( Instrument
                    color: 
                        ( ColorRotary
                            breakpoints: {
                                0 
                                50
                                90
                            }
                            breakcolors: {
                                (rgb 1 0 0)
                                (rgb 1 1 0)
                                (rgb 0 0 1)
                            }
                        )
                    components: {
                        gr:    
                        ( NumericReadout
                            inheritColor: 1
                            transform: ( Translation 0.6 0 ) 
                            format: "###"
                        )
                    }
                )
            }
        )
    }
)



// actual readout
tapero:
( NumericReadout
    format: "00#"
    transform: ( Translation 5.1 1.525 )
    value: 999
    color: cyan
)
// Lineloop around the tape
( LineLoop
    color: yellow
    transform: ( Translation 4 1.85 )
    linewidth: 2.0
    vertices: {
        [ -1  5 ]
        [  1  5 ]
        [  1 -5 ]
        [ -1 -5 ]
    }
)
    
// This is where we also put our short tape, which shows an efficient way to draw a tape
( Graphic
    transform: ( Translation 4 1.85 ) 
    scissorX: -1
    scissorWidth: 2
    scissorY: -5
    scissorHeight: 10
    components: {  
        // line in the middle
        ( Line
            color: yellow
            linewidth: 2
            vertices: {
                [ -1 0 ] [ 1 0 ]
            }
        )
        tape: 
        ( Tape
            range: 50
            height: 10
            increment: 10
            //minimum: 0
            //maximum: 500
            components: {                    
                tapegraphic: 
                ( Translator
                    // 200 feet total in 50 foot increment
                    components: {
                        number8hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 5.675 ) )
                        number7hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 3.675 ) )
                        number6hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 1.675 ) )
                        number5hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 -0.325 ) )
                        number4hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 -2.325 ) )
                        number3hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 -4.325 ) )
                        number2hunds: 
                        ( NumericReadout format: "00#" color: white transform: ( Translation -0.85 -6.325 ) )

                        ( Graphic
                            components: {
                                // every 10
                                ( TickMarks     
                                    quantity: 6
                                    gaugeLength: 10
                                    transform: ( Translation 1 -4 0.2 )
                                    tickGraphic:
                                        ( Polygon
                                            color: cyan
                                            vertices: {
                                                [ -0.4 -0.03 ]
                                                [ -0.4  0.03 ]
                                                [ 0 0.03 ]
                                                [ 0 -0.03 ]
                                            }
                                        )
                                )                    
                                // every 5
                                ( TickMarks  
                                    quantity: 11
                                    gaugeLength: 10
                                    transform: ( Translation 1 -4 0.2 )
                                    tickGraphic:
                                           ( Polygon
                                              color: white
                                              vertices: {
                                                [ -0.2 -0.024 ]
                                                [ -0.2  0.024 ]
                                                [ 0 0.024 ]
                                                [ 0 -0.024 ]
                                        }
                                     )
                                )
                            }
                        )
                    }
                )
            }
        ) 
    }
)
