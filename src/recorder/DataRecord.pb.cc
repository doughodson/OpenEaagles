// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "openeaagles/recorder/DataRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Eaagles {
namespace Recorder {
namespace Pb {

namespace {

const ::google::protobuf::Descriptor* DataRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DataRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnknownIdMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnknownIdMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarkerMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarkerMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputDeviceMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputDeviceMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewPlayerEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewPlayerEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerRemovedEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerRemovedEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerDamagedEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerDamagedEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCollisionEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCollisionEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerCrashEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerCrashEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerKilledEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerKilledEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponReleaseEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponReleaseEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponHungEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponHungEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponDetonationEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponDetonationEventMsg_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* WeaponDetonationEventMsg_DetonationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GunFiredEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GunFiredEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewTrackEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewTrackEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackRemovedEventMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackRemovedEventMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackDataMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackDataMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* Time_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Time_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerId_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerState_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackData_reflection_ = NULL;
const ::google::protobuf::Descriptor* EmissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmissionData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EmissionData_Polarization_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_openeaagles_2frecorder_2fDataRecord_2eproto() {
  protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "openeaagles/recorder/DataRecord.proto");
  GOOGLE_CHECK(file != NULL);
  DataRecord_descriptor_ = file->message_type(0);
  static const int DataRecord_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, file_id_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, unknown_id_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, marker_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, input_device_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, new_player_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_removed_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_data_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_damaged_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_collision_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_crash_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, player_killed_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, weapon_release_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, weapon_hung_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, weapon_detonation_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, gun_fired_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, new_track_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, track_removed_event_msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, track_data_msg_),
  };
  DataRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DataRecord_descriptor_,
      DataRecord::default_instance_,
      DataRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DataRecord, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DataRecord));
  FileIdMsg_descriptor_ = file->message_type(1);
  static const int FileIdMsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, event_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, application_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, case_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, mission_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, subject_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, run_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, year_),
  };
  FileIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FileIdMsg_descriptor_,
      FileIdMsg::default_instance_,
      FileIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileIdMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FileIdMsg));
  UnknownIdMsg_descriptor_ = file->message_type(2);
  static const int UnknownIdMsg_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownIdMsg, id_),
  };
  UnknownIdMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnknownIdMsg_descriptor_,
      UnknownIdMsg::default_instance_,
      UnknownIdMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownIdMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnknownIdMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnknownIdMsg));
  MarkerMsg_descriptor_ = file->message_type(3);
  static const int MarkerMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMsg, source_id_),
  };
  MarkerMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarkerMsg_descriptor_,
      MarkerMsg::default_instance_,
      MarkerMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarkerMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarkerMsg));
  InputDeviceMsg_descriptor_ = file->message_type(4);
  static const int InputDeviceMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, source_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, value_),
  };
  InputDeviceMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputDeviceMsg_descriptor_,
      InputDeviceMsg::default_instance_,
      InputDeviceMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputDeviceMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputDeviceMsg));
  NewPlayerEventMsg_descriptor_ = file->message_type(5);
  static const int NewPlayerEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEventMsg, state_),
  };
  NewPlayerEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewPlayerEventMsg_descriptor_,
      NewPlayerEventMsg::default_instance_,
      NewPlayerEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewPlayerEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewPlayerEventMsg));
  PlayerRemovedEventMsg_descriptor_ = file->message_type(6);
  static const int PlayerRemovedEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRemovedEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRemovedEventMsg, state_),
  };
  PlayerRemovedEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerRemovedEventMsg_descriptor_,
      PlayerRemovedEventMsg::default_instance_,
      PlayerRemovedEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRemovedEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRemovedEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerRemovedEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerRemovedEventMsg));
  PlayerDataMsg_descriptor_ = file->message_type(7);
  static const int PlayerDataMsg_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, cas_),
  };
  PlayerDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDataMsg_descriptor_,
      PlayerDataMsg::default_instance_,
      PlayerDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDataMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDataMsg));
  PlayerDamagedEventMsg_descriptor_ = file->message_type(8);
  static const int PlayerDamagedEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamagedEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamagedEventMsg, state_),
  };
  PlayerDamagedEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerDamagedEventMsg_descriptor_,
      PlayerDamagedEventMsg::default_instance_,
      PlayerDamagedEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamagedEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamagedEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerDamagedEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerDamagedEventMsg));
  PlayerCollisionEventMsg_descriptor_ = file->message_type(9);
  static const int PlayerCollisionEventMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, other_player_id_),
  };
  PlayerCollisionEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCollisionEventMsg_descriptor_,
      PlayerCollisionEventMsg::default_instance_,
      PlayerCollisionEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCollisionEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCollisionEventMsg));
  PlayerCrashEventMsg_descriptor_ = file->message_type(10);
  static const int PlayerCrashEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCrashEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCrashEventMsg, state_),
  };
  PlayerCrashEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerCrashEventMsg_descriptor_,
      PlayerCrashEventMsg::default_instance_,
      PlayerCrashEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCrashEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCrashEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerCrashEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerCrashEventMsg));
  PlayerKilledEventMsg_descriptor_ = file->message_type(11);
  static const int PlayerKilledEventMsg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, shooter_id_),
  };
  PlayerKilledEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerKilledEventMsg_descriptor_,
      PlayerKilledEventMsg::default_instance_,
      PlayerKilledEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerKilledEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerKilledEventMsg));
  WeaponReleaseEventMsg_descriptor_ = file->message_type(12);
  static const int WeaponReleaseEventMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, wpn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, wpn_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, shooter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, tgt_id_),
  };
  WeaponReleaseEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponReleaseEventMsg_descriptor_,
      WeaponReleaseEventMsg::default_instance_,
      WeaponReleaseEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponReleaseEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponReleaseEventMsg));
  WeaponHungEventMsg_descriptor_ = file->message_type(13);
  static const int WeaponHungEventMsg_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, wpn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, wpn_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, shooter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, tgt_id_),
  };
  WeaponHungEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponHungEventMsg_descriptor_,
      WeaponHungEventMsg::default_instance_,
      WeaponHungEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponHungEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponHungEventMsg));
  WeaponDetonationEventMsg_descriptor_ = file->message_type(14);
  static const int WeaponDetonationEventMsg_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, wpn_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, wpn_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, shooter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, tgt_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, det_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, miss_dist_),
  };
  WeaponDetonationEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponDetonationEventMsg_descriptor_,
      WeaponDetonationEventMsg::default_instance_,
      WeaponDetonationEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponDetonationEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponDetonationEventMsg));
  WeaponDetonationEventMsg_DetonationType_descriptor_ = WeaponDetonationEventMsg_descriptor_->enum_type(0);
  GunFiredEventMsg_descriptor_ = file->message_type(15);
  static const int GunFiredEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunFiredEventMsg, shooter_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunFiredEventMsg, rounds_),
  };
  GunFiredEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GunFiredEventMsg_descriptor_,
      GunFiredEventMsg::default_instance_,
      GunFiredEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunFiredEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunFiredEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GunFiredEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GunFiredEventMsg));
  NewTrackEventMsg_descriptor_ = file->message_type(16);
  static const int NewTrackEventMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, track_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, track_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, trk_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, trk_player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, emission_data_),
  };
  NewTrackEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewTrackEventMsg_descriptor_,
      NewTrackEventMsg::default_instance_,
      NewTrackEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewTrackEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewTrackEventMsg));
  TrackRemovedEventMsg_descriptor_ = file->message_type(17);
  static const int TrackRemovedEventMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackRemovedEventMsg, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackRemovedEventMsg, track_id_),
  };
  TrackRemovedEventMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackRemovedEventMsg_descriptor_,
      TrackRemovedEventMsg::default_instance_,
      TrackRemovedEventMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackRemovedEventMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackRemovedEventMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackRemovedEventMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackRemovedEventMsg));
  TrackDataMsg_descriptor_ = file->message_type(18);
  static const int TrackDataMsg_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, track_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, track_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, trk_player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, trk_player_state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, emission_data_),
  };
  TrackDataMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackDataMsg_descriptor_,
      TrackDataMsg::default_instance_,
      TrackDataMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackDataMsg, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackDataMsg));
  Vector_descriptor_ = file->message_type(19);
  static const int Vector_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, w_),
  };
  Vector_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector));
  Time_descriptor_ = file->message_type(20);
  static const int Time_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, sim_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, exec_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, utc_time_),
  };
  Time_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Time_descriptor_,
      Time::default_instance_,
      Time_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Time, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Time));
  PlayerId_descriptor_ = file->message_type(21);
  static const int PlayerId_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, fed_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, side_),
  };
  PlayerId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerId_descriptor_,
      PlayerId::default_instance_,
      PlayerId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerId, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerId));
  PlayerState_descriptor_ = file->message_type(22);
  static const int PlayerState_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, angles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, damage_),
  };
  PlayerState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerState_descriptor_,
      PlayerState::default_instance_,
      PlayerState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerState, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerState));
  TrackData_descriptor_ = file->message_type(23);
  static const int TrackData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, true_az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, rel_az_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, elevation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, altitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, avg_signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, sl_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, wpn_rel_),
  };
  TrackData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackData_descriptor_,
      TrackData::default_instance_,
      TrackData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackData));
  EmissionData_descriptor_ = file->message_type(24);
  static const int EmissionData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, frequency_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, wave_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, pulse_width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, bandwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, prf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, polarization_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, azimuth_aoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, elevation_aoi_),
  };
  EmissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EmissionData_descriptor_,
      EmissionData::default_instance_,
      EmissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, _unknown_fields_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmissionData, _extensions_),
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EmissionData));
  EmissionData_Polarization_descriptor_ = EmissionData_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_openeaagles_2frecorder_2fDataRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DataRecord_descriptor_, &DataRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FileIdMsg_descriptor_, &FileIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnknownIdMsg_descriptor_, &UnknownIdMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarkerMsg_descriptor_, &MarkerMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputDeviceMsg_descriptor_, &InputDeviceMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewPlayerEventMsg_descriptor_, &NewPlayerEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerRemovedEventMsg_descriptor_, &PlayerRemovedEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDataMsg_descriptor_, &PlayerDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerDamagedEventMsg_descriptor_, &PlayerDamagedEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCollisionEventMsg_descriptor_, &PlayerCollisionEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerCrashEventMsg_descriptor_, &PlayerCrashEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerKilledEventMsg_descriptor_, &PlayerKilledEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponReleaseEventMsg_descriptor_, &WeaponReleaseEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponHungEventMsg_descriptor_, &WeaponHungEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponDetonationEventMsg_descriptor_, &WeaponDetonationEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GunFiredEventMsg_descriptor_, &GunFiredEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewTrackEventMsg_descriptor_, &NewTrackEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackRemovedEventMsg_descriptor_, &TrackRemovedEventMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackDataMsg_descriptor_, &TrackDataMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Time_descriptor_, &Time::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerId_descriptor_, &PlayerId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerState_descriptor_, &PlayerState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackData_descriptor_, &TrackData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EmissionData_descriptor_, &EmissionData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_openeaagles_2frecorder_2fDataRecord_2eproto() {
  delete DataRecord::default_instance_;
  delete DataRecord_reflection_;
  delete FileIdMsg::default_instance_;
  delete FileIdMsg_reflection_;
  delete UnknownIdMsg::default_instance_;
  delete UnknownIdMsg_reflection_;
  delete MarkerMsg::default_instance_;
  delete MarkerMsg_reflection_;
  delete InputDeviceMsg::default_instance_;
  delete InputDeviceMsg_reflection_;
  delete NewPlayerEventMsg::default_instance_;
  delete NewPlayerEventMsg_reflection_;
  delete PlayerRemovedEventMsg::default_instance_;
  delete PlayerRemovedEventMsg_reflection_;
  delete PlayerDataMsg::default_instance_;
  delete PlayerDataMsg_reflection_;
  delete PlayerDamagedEventMsg::default_instance_;
  delete PlayerDamagedEventMsg_reflection_;
  delete PlayerCollisionEventMsg::default_instance_;
  delete PlayerCollisionEventMsg_reflection_;
  delete PlayerCrashEventMsg::default_instance_;
  delete PlayerCrashEventMsg_reflection_;
  delete PlayerKilledEventMsg::default_instance_;
  delete PlayerKilledEventMsg_reflection_;
  delete WeaponReleaseEventMsg::default_instance_;
  delete WeaponReleaseEventMsg_reflection_;
  delete WeaponHungEventMsg::default_instance_;
  delete WeaponHungEventMsg_reflection_;
  delete WeaponDetonationEventMsg::default_instance_;
  delete WeaponDetonationEventMsg_reflection_;
  delete GunFiredEventMsg::default_instance_;
  delete GunFiredEventMsg_reflection_;
  delete NewTrackEventMsg::default_instance_;
  delete NewTrackEventMsg_reflection_;
  delete TrackRemovedEventMsg::default_instance_;
  delete TrackRemovedEventMsg_reflection_;
  delete TrackDataMsg::default_instance_;
  delete TrackDataMsg_reflection_;
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete Time::default_instance_;
  delete Time_reflection_;
  delete PlayerId::default_instance_;
  delete PlayerId_reflection_;
  delete PlayerState::default_instance_;
  delete PlayerState_reflection_;
  delete TrackData::default_instance_;
  delete TrackData_reflection_;
  delete EmissionData::default_instance_;
  delete EmissionData_reflection_;
}

void protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n%openeaagles/recorder/DataRecord.proto\022"
    "\023Eaagles.Recorder.Pb\"\264\n\n\nDataRecord\022\'\n\004t"
    "ime\030\001 \002(\0132\031.Eaagles.Recorder.Pb.Time\022\n\n\002"
    "id\030\002 \002(\r\0223\n\013file_id_msg\030\013 \001(\0132\036.Eaagles."
    "Recorder.Pb.FileIdMsg\0229\n\016unknown_id_msg\030"
    "\r \001(\0132!.Eaagles.Recorder.Pb.UnknownIdMsg"
    "\0222\n\nmarker_msg\030\016 \001(\0132\036.Eaagles.Recorder."
    "Pb.MarkerMsg\022=\n\020input_device_msg\030\017 \001(\0132#"
    ".Eaagles.Recorder.Pb.InputDeviceMsg\022D\n\024n"
    "ew_player_event_msg\030\037 \001(\0132&.Eaagles.Reco"
    "rder.Pb.NewPlayerEventMsg\022L\n\030player_remo"
    "ved_event_msg\030  \001(\0132*.Eaagles.Recorder.P"
    "b.PlayerRemovedEventMsg\022;\n\017player_data_m"
    "sg\030! \001(\0132\".Eaagles.Recorder.Pb.PlayerDat"
    "aMsg\022L\n\030player_damaged_event_msg\030\" \001(\0132*"
    ".Eaagles.Recorder.Pb.PlayerDamagedEventM"
    "sg\022P\n\032player_collision_event_msg\030# \001(\0132,"
    ".Eaagles.Recorder.Pb.PlayerCollisionEven"
    "tMsg\022H\n\026player_crash_event_msg\030$ \001(\0132(.E"
    "aagles.Recorder.Pb.PlayerCrashEventMsg\022J"
    "\n\027player_killed_event_msg\030% \001(\0132).Eaagle"
    "s.Recorder.Pb.PlayerKilledEventMsg\022L\n\030we"
    "apon_release_event_msg\0303 \001(\0132*.Eaagles.R"
    "ecorder.Pb.WeaponReleaseEventMsg\022F\n\025weap"
    "on_hung_event_msg\0304 \001(\0132\'.Eaagles.Record"
    "er.Pb.WeaponHungEventMsg\022R\n\033weapon_deton"
    "ation_event_msg\0305 \001(\0132-.Eaagles.Recorder"
    ".Pb.WeaponDetonationEventMsg\022B\n\023gun_fire"
    "d_event_msg\0306 \001(\0132%.Eaagles.Recorder.Pb."
    "GunFiredEventMsg\022B\n\023new_track_event_msg\030"
    "G \001(\0132%.Eaagles.Recorder.Pb.NewTrackEven"
    "tMsg\022J\n\027track_removed_event_msg\030H \001(\0132)."
    "Eaagles.Recorder.Pb.TrackRemovedEventMsg"
    "\0229\n\016track_data_msg\030I \001(\0132!.Eaagles.Recor"
    "der.Pb.TrackDataMsg*\006\010\364\003\020\350\007*\006\010\350\007\020\220N\"\270\001\n\t"
    "FileIdMsg\022\022\n\nevent_name\030\001 \001(\t\022\023\n\013applica"
    "tion\030\002 \001(\t\022\020\n\010case_num\030\003 \001(\r\022\023\n\013mission_"
    "num\030\004 \001(\r\022\023\n\013subject_num\030\005 \001(\r\022\017\n\007run_nu"
    "m\030\006 \001(\r\022\013\n\003day\030\007 \001(\r\022\r\n\005month\030\010 \001(\r\022\014\n\004y"
    "ear\030\t \001(\r*\004\0102\020d*\005\010d\020\350\007\"\032\n\014UnknownIdMsg\022\n"
    "\n\002id\030\001 \002(\r\"7\n\tMarkerMsg\022\n\n\002id\030\001 \001(\r\022\021\n\ts"
    "ource_id\030\002 \001(\r*\004\0102\020d*\005\010d\020\350\007\"K\n\016InputDevi"
    "ceMsg\022\n\n\002id\030\001 \002(\r\022\021\n\tsource_id\030\002 \001(\r\022\r\n\005"
    "value\030\003 \001(\002*\004\0102\020d*\005\010d\020\350\007\"|\n\021NewPlayerEve"
    "ntMsg\022)\n\002id\030\001 \002(\0132\035.Eaagles.Recorder.Pb."
    "PlayerId\022/\n\005state\030\002 \002(\0132 .Eaagles.Record"
    "er.Pb.PlayerState*\004\0102\020d*\005\010d\020\350\007\"\200\001\n\025Playe"
    "rRemovedEventMsg\022)\n\002id\030\001 \002(\0132\035.Eaagles.R"
    "ecorder.Pb.PlayerId\022/\n\005state\030\002 \001(\0132 .Eaa"
    "gles.Recorder.Pb.PlayerState*\004\0102\020d*\005\010d\020\350"
    "\007\"\242\001\n\rPlayerDataMsg\022)\n\002id\030\001 \002(\0132\035.Eaagle"
    "s.Recorder.Pb.PlayerId\022/\n\005state\030\002 \002(\0132 ."
    "Eaagles.Recorder.Pb.PlayerState\022\r\n\005alpha"
    "\030\003 \001(\001\022\014\n\004beta\030\004 \001(\001\022\013\n\003cas\030\005 \001(\001*\004\0102\020d*"
    "\005\010d\020\350\007\"\200\001\n\025PlayerDamagedEventMsg\022)\n\002id\030\001"
    " \002(\0132\035.Eaagles.Recorder.Pb.PlayerId\022/\n\005s"
    "tate\030\002 \001(\0132 .Eaagles.Recorder.Pb.PlayerS"
    "tate*\004\0102\020d*\005\010d\020\350\007\"\272\001\n\027PlayerCollisionEve"
    "ntMsg\022)\n\002id\030\001 \002(\0132\035.Eaagles.Recorder.Pb."
    "PlayerId\022/\n\005state\030\002 \001(\0132 .Eaagles.Record"
    "er.Pb.PlayerState\0226\n\017other_player_id\030\003 \001"
    "(\0132\035.Eaagles.Recorder.Pb.PlayerId*\004\0102\020d*"
    "\005\010d\020\350\007\"~\n\023PlayerCrashEventMsg\022)\n\002id\030\001 \002("
    "\0132\035.Eaagles.Recorder.Pb.PlayerId\022/\n\005stat"
    "e\030\002 \001(\0132 .Eaagles.Recorder.Pb.PlayerStat"
    "e*\004\0102\020d*\005\010d\020\350\007\"\262\001\n\024PlayerKilledEventMsg\022"
    ")\n\002id\030\001 \002(\0132\035.Eaagles.Recorder.Pb.Player"
    "Id\022/\n\005state\030\002 \001(\0132 .Eaagles.Recorder.Pb."
    "PlayerState\0221\n\nshooter_id\030\003 \001(\0132\035.Eaagle"
    "s.Recorder.Pb.PlayerId*\004\0102\020d*\005\010d\020\350\007\"\352\001\n\025"
    "WeaponReleaseEventMsg\022-\n\006wpn_id\030\001 \002(\0132\035."
    "Eaagles.Recorder.Pb.PlayerId\0223\n\twpn_stat"
    "e\030\002 \001(\0132 .Eaagles.Recorder.Pb.PlayerStat"
    "e\0221\n\nshooter_id\030\003 \001(\0132\035.Eaagles.Recorder"
    ".Pb.PlayerId\022-\n\006tgt_id\030\004 \001(\0132\035.Eaagles.R"
    "ecorder.Pb.PlayerId*\004\0102\020d*\005\010d\020\350\007\"\347\001\n\022Wea"
    "ponHungEventMsg\022-\n\006wpn_id\030\001 \002(\0132\035.Eaagle"
    "s.Recorder.Pb.PlayerId\0223\n\twpn_state\030\002 \001("
    "\0132 .Eaagles.Recorder.Pb.PlayerState\0221\n\ns"
    "hooter_id\030\003 \001(\0132\035.Eaagles.Recorder.Pb.Pl"
    "ayerId\022-\n\006tgt_id\030\004 \001(\0132\035.Eaagles.Recorde"
    "r.Pb.PlayerId*\004\0102\020d*\005\010d\020\350\007\"\257\004\n\030WeaponDet"
    "onationEventMsg\022-\n\006wpn_id\030\001 \002(\0132\035.Eaagle"
    "s.Recorder.Pb.PlayerId\0223\n\twpn_state\030\002 \001("
    "\0132 .Eaagles.Recorder.Pb.PlayerState\0221\n\ns"
    "hooter_id\030\003 \001(\0132\035.Eaagles.Recorder.Pb.Pl"
    "ayerId\022-\n\006tgt_id\030\004 \001(\0132\035.Eaagles.Recorde"
    "r.Pb.PlayerId\022N\n\010det_type\030\005 \001(\0162<.Eaagle"
    "s.Recorder.Pb.WeaponDetonationEventMsg.D"
    "etonationType\022\021\n\tmiss_dist\030\006 \001(\001\"\334\001\n\016Det"
    "onationType\022\022\n\016DETONATE_OTHER\020\000\022\032\n\026DETON"
    "ATE_ENTITY_IMPACT\020\001\022(\n$DETONATE_ENTITY_P"
    "ROXIMATE_DETONATION\020\002\022\032\n\026DETONATE_GROUND"
    "_IMPACT\020\003\022(\n$DETONATE_GROUND_PROXIMATE_D"
    "ETONATION\020\004\022\027\n\023DETONATE_DETONATION\020\005\022\021\n\r"
    "DETONATE_NONE\020\006*\004\0102\020d*\005\010d\020\350\007\"b\n\020GunFired"
    "EventMsg\0221\n\nshooter_id\030\001 \002(\0132\035.Eaagles.R"
    "ecorder.Pb.PlayerId\022\016\n\006rounds\030\002 \001(\r*\004\0102\020"
    "d*\005\010d\020\350\007\"\373\002\n\020NewTrackEventMsg\0220\n\tplayer_"
    "id\030\001 \002(\0132\035.Eaagles.Recorder.Pb.PlayerId\022"
    "\020\n\010track_id\030\002 \002(\t\0222\n\ntrack_data\030\003 \001(\0132\036."
    "Eaagles.Recorder.Pb.TrackData\0226\n\014player_"
    "state\030\004 \001(\0132 .Eaagles.Recorder.Pb.Player"
    "State\0224\n\rtrk_player_id\030\005 \001(\0132\035.Eaagles.R"
    "ecorder.Pb.PlayerId\022:\n\020trk_player_state\030"
    "\006 \001(\0132 .Eaagles.Recorder.Pb.PlayerState\022"
    "8\n\remission_data\030\007 \001(\0132!.Eaagles.Recorde"
    "r.Pb.EmissionData*\004\0102\020d*\005\010d\020\350\007\"g\n\024TrackR"
    "emovedEventMsg\0220\n\tplayer_id\030\001 \002(\0132\035.Eaag"
    "les.Recorder.Pb.PlayerId\022\020\n\010track_id\030\002 \002"
    "(\t*\004\0102\020d*\005\010d\020\350\007\"\367\002\n\014TrackDataMsg\0220\n\tplay"
    "er_id\030\001 \002(\0132\035.Eaagles.Recorder.Pb.Player"
    "Id\022\020\n\010track_id\030\002 \002(\t\0222\n\ntrack_data\030\003 \001(\013"
    "2\036.Eaagles.Recorder.Pb.TrackData\0226\n\014play"
    "er_state\030\004 \001(\0132 .Eaagles.Recorder.Pb.Pla"
    "yerState\0224\n\rtrk_player_id\030\005 \001(\0132\035.Eaagle"
    "s.Recorder.Pb.PlayerId\022:\n\020trk_player_sta"
    "te\030\006 \001(\0132 .Eaagles.Recorder.Pb.PlayerSta"
    "te\0228\n\remission_data\030\007 \001(\0132!.Eaagles.Reco"
    "rder.Pb.EmissionData*\004\0102\020d*\005\010d\020\350\007\"4\n\006Vec"
    "tor\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\t\n\001z\030\003 \001(\001\022\t\n\001"
    "w\030\004 \001(\001\"J\n\004Time\022\020\n\010sim_time\030\001 \002(\001\022\021\n\texe"
    "c_time\030\002 \001(\001\022\020\n\010utc_time\030\003 \001(\001*\004\0102\020d*\005\010d"
    "\020\350\007\"Q\n\010PlayerId\022\n\n\002id\030\001 \002(\r\022\014\n\004name\030\002 \001("
    "\t\022\020\n\010fed_name\030\003 \001(\t\022\014\n\004side\030\004 \001(\r*\004\0102\020d*"
    "\005\010d\020\350\007\"\253\001\n\013PlayerState\022(\n\003pos\030\001 \002(\0132\033.Ea"
    "agles.Recorder.Pb.Vector\022+\n\006angles\030\002 \002(\013"
    "2\033.Eaagles.Recorder.Pb.Vector\022(\n\003vel\030\003 \001"
    "(\0132\033.Eaagles.Recorder.Pb.Vector\022\016\n\006damag"
    "e\030\004 \001(\001*\004\0102\020d*\005\010d\020\350\007\"\306\002\n\tTrackData\022\014\n\004ty"
    "pe\030\001 \001(\r\022\017\n\007quality\030\002 \001(\001\022\017\n\007true_az\030\003 \001"
    "(\001\022\016\n\006rel_az\030\004 \001(\001\022\021\n\televation\030\005 \001(\001\022\r\n"
    "\005range\030\006 \001(\001\022\020\n\010latitude\030\007 \001(\001\022\021\n\tlongit"
    "ude\030\010 \001(\001\022\020\n\010altitude\030\t \001(\001\022-\n\010position\030"
    "\n \001(\0132\033.Eaagles.Recorder.Pb.Vector\022-\n\010ve"
    "locity\030\013 \001(\0132\033.Eaagles.Recorder.Pb.Vecto"
    "r\022\022\n\navg_signal\030\014 \001(\001\022\020\n\010sl_index\030\r \001(\r\022"
    "\017\n\007wpn_rel\030\016 \001(\010*\004\0102\020d*\005\010d\020\350\007\"\316\002\n\014Emissi"
    "onData\022\021\n\tfrequency\030\001 \001(\001\022\023\n\013wave_length"
    "\030\002 \001(\001\022\023\n\013pulse_width\030\003 \001(\001\022\021\n\tbandwidth"
    "\030\004 \001(\001\022\013\n\003prf\030\005 \001(\001\022\r\n\005power\030\006 \001(\001\022D\n\014po"
    "larization\030\007 \001(\0162..Eaagles.Recorder.Pb.E"
    "missionData.Polarization\022\023\n\013azimuth_aoi\030"
    "\010 \001(\001\022\025\n\relevation_aoi\030\t \001(\001\"S\n\014Polariza"
    "tion\022\010\n\004NONE\020\000\022\014\n\010VERTICAL\020\001\022\016\n\nHORIZONT"
    "AL\020\002\022\t\n\005SLANT\020\003\022\007\n\003RHC\020\004\022\007\n\003LHC\020\005*\004\0102\020d*"
    "\005\010d\020\350\007", 5846);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "openeaagles/recorder/DataRecord.proto", &protobuf_RegisterTypes);
  DataRecord::default_instance_ = new DataRecord();
  FileIdMsg::default_instance_ = new FileIdMsg();
  UnknownIdMsg::default_instance_ = new UnknownIdMsg();
  MarkerMsg::default_instance_ = new MarkerMsg();
  InputDeviceMsg::default_instance_ = new InputDeviceMsg();
  NewPlayerEventMsg::default_instance_ = new NewPlayerEventMsg();
  PlayerRemovedEventMsg::default_instance_ = new PlayerRemovedEventMsg();
  PlayerDataMsg::default_instance_ = new PlayerDataMsg();
  PlayerDamagedEventMsg::default_instance_ = new PlayerDamagedEventMsg();
  PlayerCollisionEventMsg::default_instance_ = new PlayerCollisionEventMsg();
  PlayerCrashEventMsg::default_instance_ = new PlayerCrashEventMsg();
  PlayerKilledEventMsg::default_instance_ = new PlayerKilledEventMsg();
  WeaponReleaseEventMsg::default_instance_ = new WeaponReleaseEventMsg();
  WeaponHungEventMsg::default_instance_ = new WeaponHungEventMsg();
  WeaponDetonationEventMsg::default_instance_ = new WeaponDetonationEventMsg();
  GunFiredEventMsg::default_instance_ = new GunFiredEventMsg();
  NewTrackEventMsg::default_instance_ = new NewTrackEventMsg();
  TrackRemovedEventMsg::default_instance_ = new TrackRemovedEventMsg();
  TrackDataMsg::default_instance_ = new TrackDataMsg();
  Vector::default_instance_ = new Vector();
  Time::default_instance_ = new Time();
  PlayerId::default_instance_ = new PlayerId();
  PlayerState::default_instance_ = new PlayerState();
  TrackData::default_instance_ = new TrackData();
  EmissionData::default_instance_ = new EmissionData();
  DataRecord::default_instance_->InitAsDefaultInstance();
  FileIdMsg::default_instance_->InitAsDefaultInstance();
  UnknownIdMsg::default_instance_->InitAsDefaultInstance();
  MarkerMsg::default_instance_->InitAsDefaultInstance();
  InputDeviceMsg::default_instance_->InitAsDefaultInstance();
  NewPlayerEventMsg::default_instance_->InitAsDefaultInstance();
  PlayerRemovedEventMsg::default_instance_->InitAsDefaultInstance();
  PlayerDataMsg::default_instance_->InitAsDefaultInstance();
  PlayerDamagedEventMsg::default_instance_->InitAsDefaultInstance();
  PlayerCollisionEventMsg::default_instance_->InitAsDefaultInstance();
  PlayerCrashEventMsg::default_instance_->InitAsDefaultInstance();
  PlayerKilledEventMsg::default_instance_->InitAsDefaultInstance();
  WeaponReleaseEventMsg::default_instance_->InitAsDefaultInstance();
  WeaponHungEventMsg::default_instance_->InitAsDefaultInstance();
  WeaponDetonationEventMsg::default_instance_->InitAsDefaultInstance();
  GunFiredEventMsg::default_instance_->InitAsDefaultInstance();
  NewTrackEventMsg::default_instance_->InitAsDefaultInstance();
  TrackRemovedEventMsg::default_instance_->InitAsDefaultInstance();
  TrackDataMsg::default_instance_->InitAsDefaultInstance();
  Vector::default_instance_->InitAsDefaultInstance();
  Time::default_instance_->InitAsDefaultInstance();
  PlayerId::default_instance_->InitAsDefaultInstance();
  PlayerState::default_instance_->InitAsDefaultInstance();
  TrackData::default_instance_->InitAsDefaultInstance();
  EmissionData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_openeaagles_2frecorder_2fDataRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_openeaagles_2frecorder_2fDataRecord_2eproto {
  StaticDescriptorInitializer_openeaagles_2frecorder_2fDataRecord_2eproto() {
    protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();
  }
} static_descriptor_initializer_openeaagles_2frecorder_2fDataRecord_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DataRecord::kTimeFieldNumber;
const int DataRecord::kIdFieldNumber;
const int DataRecord::kFileIdMsgFieldNumber;
const int DataRecord::kUnknownIdMsgFieldNumber;
const int DataRecord::kMarkerMsgFieldNumber;
const int DataRecord::kInputDeviceMsgFieldNumber;
const int DataRecord::kNewPlayerEventMsgFieldNumber;
const int DataRecord::kPlayerRemovedEventMsgFieldNumber;
const int DataRecord::kPlayerDataMsgFieldNumber;
const int DataRecord::kPlayerDamagedEventMsgFieldNumber;
const int DataRecord::kPlayerCollisionEventMsgFieldNumber;
const int DataRecord::kPlayerCrashEventMsgFieldNumber;
const int DataRecord::kPlayerKilledEventMsgFieldNumber;
const int DataRecord::kWeaponReleaseEventMsgFieldNumber;
const int DataRecord::kWeaponHungEventMsgFieldNumber;
const int DataRecord::kWeaponDetonationEventMsgFieldNumber;
const int DataRecord::kGunFiredEventMsgFieldNumber;
const int DataRecord::kNewTrackEventMsgFieldNumber;
const int DataRecord::kTrackRemovedEventMsgFieldNumber;
const int DataRecord::kTrackDataMsgFieldNumber;
#endif  // !_MSC_VER

DataRecord::DataRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DataRecord::InitAsDefaultInstance() {
  time_ = const_cast< ::Eaagles::Recorder::Pb::Time*>(&::Eaagles::Recorder::Pb::Time::default_instance());
  file_id_msg_ = const_cast< ::Eaagles::Recorder::Pb::FileIdMsg*>(&::Eaagles::Recorder::Pb::FileIdMsg::default_instance());
  unknown_id_msg_ = const_cast< ::Eaagles::Recorder::Pb::UnknownIdMsg*>(&::Eaagles::Recorder::Pb::UnknownIdMsg::default_instance());
  marker_msg_ = const_cast< ::Eaagles::Recorder::Pb::MarkerMsg*>(&::Eaagles::Recorder::Pb::MarkerMsg::default_instance());
  input_device_msg_ = const_cast< ::Eaagles::Recorder::Pb::InputDeviceMsg*>(&::Eaagles::Recorder::Pb::InputDeviceMsg::default_instance());
  new_player_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::NewPlayerEventMsg*>(&::Eaagles::Recorder::Pb::NewPlayerEventMsg::default_instance());
  player_removed_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerRemovedEventMsg*>(&::Eaagles::Recorder::Pb::PlayerRemovedEventMsg::default_instance());
  player_data_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerDataMsg*>(&::Eaagles::Recorder::Pb::PlayerDataMsg::default_instance());
  player_damaged_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerDamagedEventMsg*>(&::Eaagles::Recorder::Pb::PlayerDamagedEventMsg::default_instance());
  player_collision_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerCollisionEventMsg*>(&::Eaagles::Recorder::Pb::PlayerCollisionEventMsg::default_instance());
  player_crash_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerCrashEventMsg*>(&::Eaagles::Recorder::Pb::PlayerCrashEventMsg::default_instance());
  player_killed_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::PlayerKilledEventMsg*>(&::Eaagles::Recorder::Pb::PlayerKilledEventMsg::default_instance());
  weapon_release_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::WeaponReleaseEventMsg*>(&::Eaagles::Recorder::Pb::WeaponReleaseEventMsg::default_instance());
  weapon_hung_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::WeaponHungEventMsg*>(&::Eaagles::Recorder::Pb::WeaponHungEventMsg::default_instance());
  weapon_detonation_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::WeaponDetonationEventMsg*>(&::Eaagles::Recorder::Pb::WeaponDetonationEventMsg::default_instance());
  gun_fired_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::GunFiredEventMsg*>(&::Eaagles::Recorder::Pb::GunFiredEventMsg::default_instance());
  new_track_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::NewTrackEventMsg*>(&::Eaagles::Recorder::Pb::NewTrackEventMsg::default_instance());
  track_removed_event_msg_ = const_cast< ::Eaagles::Recorder::Pb::TrackRemovedEventMsg*>(&::Eaagles::Recorder::Pb::TrackRemovedEventMsg::default_instance());
  track_data_msg_ = const_cast< ::Eaagles::Recorder::Pb::TrackDataMsg*>(&::Eaagles::Recorder::Pb::TrackDataMsg::default_instance());
}

DataRecord::DataRecord(const DataRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DataRecord::SharedCtor() {
  _cached_size_ = 0;
  time_ = NULL;
  id_ = 0u;
  file_id_msg_ = NULL;
  unknown_id_msg_ = NULL;
  marker_msg_ = NULL;
  input_device_msg_ = NULL;
  new_player_event_msg_ = NULL;
  player_removed_event_msg_ = NULL;
  player_data_msg_ = NULL;
  player_damaged_event_msg_ = NULL;
  player_collision_event_msg_ = NULL;
  player_crash_event_msg_ = NULL;
  player_killed_event_msg_ = NULL;
  weapon_release_event_msg_ = NULL;
  weapon_hung_event_msg_ = NULL;
  weapon_detonation_event_msg_ = NULL;
  gun_fired_event_msg_ = NULL;
  new_track_event_msg_ = NULL;
  track_removed_event_msg_ = NULL;
  track_data_msg_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DataRecord::~DataRecord() {
  SharedDtor();
}

void DataRecord::SharedDtor() {
  if (this != default_instance_) {
    delete time_;
    delete file_id_msg_;
    delete unknown_id_msg_;
    delete marker_msg_;
    delete input_device_msg_;
    delete new_player_event_msg_;
    delete player_removed_event_msg_;
    delete player_data_msg_;
    delete player_damaged_event_msg_;
    delete player_collision_event_msg_;
    delete player_crash_event_msg_;
    delete player_killed_event_msg_;
    delete weapon_release_event_msg_;
    delete weapon_hung_event_msg_;
    delete weapon_detonation_event_msg_;
    delete gun_fired_event_msg_;
    delete new_track_event_msg_;
    delete track_removed_event_msg_;
    delete track_data_msg_;
  }
}

void DataRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DataRecord_descriptor_;
}

const DataRecord& DataRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

DataRecord* DataRecord::default_instance_ = NULL;

DataRecord* DataRecord::New() const {
  return new DataRecord;
}

void DataRecord::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_time()) {
      if (time_ != NULL) time_->::Eaagles::Recorder::Pb::Time::Clear();
    }
    id_ = 0u;
    if (has_file_id_msg()) {
      if (file_id_msg_ != NULL) file_id_msg_->::Eaagles::Recorder::Pb::FileIdMsg::Clear();
    }
    if (has_unknown_id_msg()) {
      if (unknown_id_msg_ != NULL) unknown_id_msg_->::Eaagles::Recorder::Pb::UnknownIdMsg::Clear();
    }
    if (has_marker_msg()) {
      if (marker_msg_ != NULL) marker_msg_->::Eaagles::Recorder::Pb::MarkerMsg::Clear();
    }
    if (has_input_device_msg()) {
      if (input_device_msg_ != NULL) input_device_msg_->::Eaagles::Recorder::Pb::InputDeviceMsg::Clear();
    }
    if (has_new_player_event_msg()) {
      if (new_player_event_msg_ != NULL) new_player_event_msg_->::Eaagles::Recorder::Pb::NewPlayerEventMsg::Clear();
    }
    if (has_player_removed_event_msg()) {
      if (player_removed_event_msg_ != NULL) player_removed_event_msg_->::Eaagles::Recorder::Pb::PlayerRemovedEventMsg::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_player_data_msg()) {
      if (player_data_msg_ != NULL) player_data_msg_->::Eaagles::Recorder::Pb::PlayerDataMsg::Clear();
    }
    if (has_player_damaged_event_msg()) {
      if (player_damaged_event_msg_ != NULL) player_damaged_event_msg_->::Eaagles::Recorder::Pb::PlayerDamagedEventMsg::Clear();
    }
    if (has_player_collision_event_msg()) {
      if (player_collision_event_msg_ != NULL) player_collision_event_msg_->::Eaagles::Recorder::Pb::PlayerCollisionEventMsg::Clear();
    }
    if (has_player_crash_event_msg()) {
      if (player_crash_event_msg_ != NULL) player_crash_event_msg_->::Eaagles::Recorder::Pb::PlayerCrashEventMsg::Clear();
    }
    if (has_player_killed_event_msg()) {
      if (player_killed_event_msg_ != NULL) player_killed_event_msg_->::Eaagles::Recorder::Pb::PlayerKilledEventMsg::Clear();
    }
    if (has_weapon_release_event_msg()) {
      if (weapon_release_event_msg_ != NULL) weapon_release_event_msg_->::Eaagles::Recorder::Pb::WeaponReleaseEventMsg::Clear();
    }
    if (has_weapon_hung_event_msg()) {
      if (weapon_hung_event_msg_ != NULL) weapon_hung_event_msg_->::Eaagles::Recorder::Pb::WeaponHungEventMsg::Clear();
    }
    if (has_weapon_detonation_event_msg()) {
      if (weapon_detonation_event_msg_ != NULL) weapon_detonation_event_msg_->::Eaagles::Recorder::Pb::WeaponDetonationEventMsg::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_gun_fired_event_msg()) {
      if (gun_fired_event_msg_ != NULL) gun_fired_event_msg_->::Eaagles::Recorder::Pb::GunFiredEventMsg::Clear();
    }
    if (has_new_track_event_msg()) {
      if (new_track_event_msg_ != NULL) new_track_event_msg_->::Eaagles::Recorder::Pb::NewTrackEventMsg::Clear();
    }
    if (has_track_removed_event_msg()) {
      if (track_removed_event_msg_ != NULL) track_removed_event_msg_->::Eaagles::Recorder::Pb::TrackRemovedEventMsg::Clear();
    }
    if (has_track_data_msg()) {
      if (track_data_msg_ != NULL) track_data_msg_->::Eaagles::Recorder::Pb::TrackDataMsg::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.Time time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }
      
      // required uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_file_id_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.FileIdMsg file_id_msg = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_file_id_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_id_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_unknown_id_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.UnknownIdMsg unknown_id_msg = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unknown_id_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unknown_id_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_marker_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.MarkerMsg marker_msg = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marker_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marker_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_input_device_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.InputDeviceMsg input_device_msg = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input_device_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input_device_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_new_player_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.NewPlayerEventMsg new_player_event_msg = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_player_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_player_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_player_removed_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerRemovedEventMsg player_removed_event_msg = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_removed_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_removed_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_player_data_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerDataMsg player_data_msg = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_data_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_player_damaged_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerDamagedEventMsg player_damaged_event_msg = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_damaged_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_damaged_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_player_collision_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerCollisionEventMsg player_collision_event_msg = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_collision_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_collision_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_player_crash_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerCrashEventMsg player_crash_event_msg = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_crash_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_crash_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_player_killed_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerKilledEventMsg player_killed_event_msg = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_killed_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_killed_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(410)) goto parse_weapon_release_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.WeaponReleaseEventMsg weapon_release_event_msg = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_release_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon_release_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_weapon_hung_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.WeaponHungEventMsg weapon_hung_event_msg = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_hung_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon_hung_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_weapon_detonation_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg weapon_detonation_event_msg = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weapon_detonation_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weapon_detonation_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(434)) goto parse_gun_fired_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.GunFiredEventMsg gun_fired_event_msg = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gun_fired_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gun_fired_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(570)) goto parse_new_track_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.NewTrackEventMsg new_track_event_msg = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_track_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_new_track_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_track_removed_event_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.TrackRemovedEventMsg track_removed_event_msg = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_removed_event_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track_removed_event_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_track_data_msg;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.TrackDataMsg track_data_msg = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_data_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track_data_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((4000u <= tag && tag < 8000u) ||
            (8000u <= tag && tag < 80000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.Time time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->time(), output);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.FileIdMsg file_id_msg = 11;
  if (has_file_id_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->file_id_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.UnknownIdMsg unknown_id_msg = 13;
  if (has_unknown_id_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->unknown_id_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.MarkerMsg marker_msg = 14;
  if (has_marker_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->marker_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.InputDeviceMsg input_device_msg = 15;
  if (has_input_device_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->input_device_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.NewPlayerEventMsg new_player_event_msg = 31;
  if (has_new_player_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->new_player_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerRemovedEventMsg player_removed_event_msg = 32;
  if (has_player_removed_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->player_removed_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerDataMsg player_data_msg = 33;
  if (has_player_data_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->player_data_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerDamagedEventMsg player_damaged_event_msg = 34;
  if (has_player_damaged_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->player_damaged_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerCollisionEventMsg player_collision_event_msg = 35;
  if (has_player_collision_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->player_collision_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerCrashEventMsg player_crash_event_msg = 36;
  if (has_player_crash_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->player_crash_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerKilledEventMsg player_killed_event_msg = 37;
  if (has_player_killed_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->player_killed_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponReleaseEventMsg weapon_release_event_msg = 51;
  if (has_weapon_release_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->weapon_release_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponHungEventMsg weapon_hung_event_msg = 52;
  if (has_weapon_hung_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->weapon_hung_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg weapon_detonation_event_msg = 53;
  if (has_weapon_detonation_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->weapon_detonation_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.GunFiredEventMsg gun_fired_event_msg = 54;
  if (has_gun_fired_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      54, this->gun_fired_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.NewTrackEventMsg new_track_event_msg = 71;
  if (has_new_track_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->new_track_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackRemovedEventMsg track_removed_event_msg = 72;
  if (has_track_removed_event_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->track_removed_event_msg(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackDataMsg track_data_msg = 73;
  if (has_track_data_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->track_data_msg(), output);
  }
  
  // Extension range [500, 1000)
  _extensions_.SerializeWithCachedSizes(
      500, 1000, output);
  
  // Extension range [1000, 10000)
  _extensions_.SerializeWithCachedSizes(
      1000, 10000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DataRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.Time time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->time(), target);
  }
  
  // required uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.FileIdMsg file_id_msg = 11;
  if (has_file_id_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->file_id_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.UnknownIdMsg unknown_id_msg = 13;
  if (has_unknown_id_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->unknown_id_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.MarkerMsg marker_msg = 14;
  if (has_marker_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->marker_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.InputDeviceMsg input_device_msg = 15;
  if (has_input_device_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->input_device_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.NewPlayerEventMsg new_player_event_msg = 31;
  if (has_new_player_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->new_player_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerRemovedEventMsg player_removed_event_msg = 32;
  if (has_player_removed_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->player_removed_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerDataMsg player_data_msg = 33;
  if (has_player_data_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->player_data_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerDamagedEventMsg player_damaged_event_msg = 34;
  if (has_player_damaged_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->player_damaged_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerCollisionEventMsg player_collision_event_msg = 35;
  if (has_player_collision_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->player_collision_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerCrashEventMsg player_crash_event_msg = 36;
  if (has_player_crash_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->player_crash_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerKilledEventMsg player_killed_event_msg = 37;
  if (has_player_killed_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->player_killed_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponReleaseEventMsg weapon_release_event_msg = 51;
  if (has_weapon_release_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->weapon_release_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponHungEventMsg weapon_hung_event_msg = 52;
  if (has_weapon_hung_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->weapon_hung_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg weapon_detonation_event_msg = 53;
  if (has_weapon_detonation_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->weapon_detonation_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.GunFiredEventMsg gun_fired_event_msg = 54;
  if (has_gun_fired_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        54, this->gun_fired_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.NewTrackEventMsg new_track_event_msg = 71;
  if (has_new_track_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->new_track_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackRemovedEventMsg track_removed_event_msg = 72;
  if (has_track_removed_event_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->track_removed_event_msg(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackDataMsg track_data_msg = 73;
  if (has_track_data_msg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->track_data_msg(), target);
  }
  
  // Extension range [500, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      500, 1000, target);
  
  // Extension range [1000, 10000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      1000, 10000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DataRecord::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.Time time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }
    
    // required uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.FileIdMsg file_id_msg = 11;
    if (has_file_id_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->file_id_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.UnknownIdMsg unknown_id_msg = 13;
    if (has_unknown_id_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unknown_id_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.MarkerMsg marker_msg = 14;
    if (has_marker_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marker_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.InputDeviceMsg input_device_msg = 15;
    if (has_input_device_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input_device_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.NewPlayerEventMsg new_player_event_msg = 31;
    if (has_new_player_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_player_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerRemovedEventMsg player_removed_event_msg = 32;
    if (has_player_removed_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_removed_event_msg());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .Eaagles.Recorder.Pb.PlayerDataMsg player_data_msg = 33;
    if (has_player_data_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_data_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerDamagedEventMsg player_damaged_event_msg = 34;
    if (has_player_damaged_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_damaged_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerCollisionEventMsg player_collision_event_msg = 35;
    if (has_player_collision_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_collision_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerCrashEventMsg player_crash_event_msg = 36;
    if (has_player_crash_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_crash_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerKilledEventMsg player_killed_event_msg = 37;
    if (has_player_killed_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_killed_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.WeaponReleaseEventMsg weapon_release_event_msg = 51;
    if (has_weapon_release_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_release_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.WeaponHungEventMsg weapon_hung_event_msg = 52;
    if (has_weapon_hung_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_hung_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg weapon_detonation_event_msg = 53;
    if (has_weapon_detonation_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weapon_detonation_event_msg());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .Eaagles.Recorder.Pb.GunFiredEventMsg gun_fired_event_msg = 54;
    if (has_gun_fired_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gun_fired_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.NewTrackEventMsg new_track_event_msg = 71;
    if (has_new_track_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->new_track_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.TrackRemovedEventMsg track_removed_event_msg = 72;
    if (has_track_removed_event_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track_removed_event_msg());
    }
    
    // optional .Eaagles.Recorder.Pb.TrackDataMsg track_data_msg = 73;
    if (has_track_data_msg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track_data_msg());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DataRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DataRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DataRecord::MergeFrom(const DataRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      mutable_time()->::Eaagles::Recorder::Pb::Time::MergeFrom(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_file_id_msg()) {
      mutable_file_id_msg()->::Eaagles::Recorder::Pb::FileIdMsg::MergeFrom(from.file_id_msg());
    }
    if (from.has_unknown_id_msg()) {
      mutable_unknown_id_msg()->::Eaagles::Recorder::Pb::UnknownIdMsg::MergeFrom(from.unknown_id_msg());
    }
    if (from.has_marker_msg()) {
      mutable_marker_msg()->::Eaagles::Recorder::Pb::MarkerMsg::MergeFrom(from.marker_msg());
    }
    if (from.has_input_device_msg()) {
      mutable_input_device_msg()->::Eaagles::Recorder::Pb::InputDeviceMsg::MergeFrom(from.input_device_msg());
    }
    if (from.has_new_player_event_msg()) {
      mutable_new_player_event_msg()->::Eaagles::Recorder::Pb::NewPlayerEventMsg::MergeFrom(from.new_player_event_msg());
    }
    if (from.has_player_removed_event_msg()) {
      mutable_player_removed_event_msg()->::Eaagles::Recorder::Pb::PlayerRemovedEventMsg::MergeFrom(from.player_removed_event_msg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_player_data_msg()) {
      mutable_player_data_msg()->::Eaagles::Recorder::Pb::PlayerDataMsg::MergeFrom(from.player_data_msg());
    }
    if (from.has_player_damaged_event_msg()) {
      mutable_player_damaged_event_msg()->::Eaagles::Recorder::Pb::PlayerDamagedEventMsg::MergeFrom(from.player_damaged_event_msg());
    }
    if (from.has_player_collision_event_msg()) {
      mutable_player_collision_event_msg()->::Eaagles::Recorder::Pb::PlayerCollisionEventMsg::MergeFrom(from.player_collision_event_msg());
    }
    if (from.has_player_crash_event_msg()) {
      mutable_player_crash_event_msg()->::Eaagles::Recorder::Pb::PlayerCrashEventMsg::MergeFrom(from.player_crash_event_msg());
    }
    if (from.has_player_killed_event_msg()) {
      mutable_player_killed_event_msg()->::Eaagles::Recorder::Pb::PlayerKilledEventMsg::MergeFrom(from.player_killed_event_msg());
    }
    if (from.has_weapon_release_event_msg()) {
      mutable_weapon_release_event_msg()->::Eaagles::Recorder::Pb::WeaponReleaseEventMsg::MergeFrom(from.weapon_release_event_msg());
    }
    if (from.has_weapon_hung_event_msg()) {
      mutable_weapon_hung_event_msg()->::Eaagles::Recorder::Pb::WeaponHungEventMsg::MergeFrom(from.weapon_hung_event_msg());
    }
    if (from.has_weapon_detonation_event_msg()) {
      mutable_weapon_detonation_event_msg()->::Eaagles::Recorder::Pb::WeaponDetonationEventMsg::MergeFrom(from.weapon_detonation_event_msg());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_gun_fired_event_msg()) {
      mutable_gun_fired_event_msg()->::Eaagles::Recorder::Pb::GunFiredEventMsg::MergeFrom(from.gun_fired_event_msg());
    }
    if (from.has_new_track_event_msg()) {
      mutable_new_track_event_msg()->::Eaagles::Recorder::Pb::NewTrackEventMsg::MergeFrom(from.new_track_event_msg());
    }
    if (from.has_track_removed_event_msg()) {
      mutable_track_removed_event_msg()->::Eaagles::Recorder::Pb::TrackRemovedEventMsg::MergeFrom(from.track_removed_event_msg());
    }
    if (from.has_track_data_msg()) {
      mutable_track_data_msg()->::Eaagles::Recorder::Pb::TrackDataMsg::MergeFrom(from.track_data_msg());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DataRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataRecord::CopyFrom(const DataRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_time()) {
    if (!this->time().IsInitialized()) return false;
  }
  if (has_file_id_msg()) {
    if (!this->file_id_msg().IsInitialized()) return false;
  }
  if (has_unknown_id_msg()) {
    if (!this->unknown_id_msg().IsInitialized()) return false;
  }
  if (has_marker_msg()) {
    if (!this->marker_msg().IsInitialized()) return false;
  }
  if (has_input_device_msg()) {
    if (!this->input_device_msg().IsInitialized()) return false;
  }
  if (has_new_player_event_msg()) {
    if (!this->new_player_event_msg().IsInitialized()) return false;
  }
  if (has_player_removed_event_msg()) {
    if (!this->player_removed_event_msg().IsInitialized()) return false;
  }
  if (has_player_data_msg()) {
    if (!this->player_data_msg().IsInitialized()) return false;
  }
  if (has_player_damaged_event_msg()) {
    if (!this->player_damaged_event_msg().IsInitialized()) return false;
  }
  if (has_player_collision_event_msg()) {
    if (!this->player_collision_event_msg().IsInitialized()) return false;
  }
  if (has_player_crash_event_msg()) {
    if (!this->player_crash_event_msg().IsInitialized()) return false;
  }
  if (has_player_killed_event_msg()) {
    if (!this->player_killed_event_msg().IsInitialized()) return false;
  }
  if (has_weapon_release_event_msg()) {
    if (!this->weapon_release_event_msg().IsInitialized()) return false;
  }
  if (has_weapon_hung_event_msg()) {
    if (!this->weapon_hung_event_msg().IsInitialized()) return false;
  }
  if (has_weapon_detonation_event_msg()) {
    if (!this->weapon_detonation_event_msg().IsInitialized()) return false;
  }
  if (has_gun_fired_event_msg()) {
    if (!this->gun_fired_event_msg().IsInitialized()) return false;
  }
  if (has_new_track_event_msg()) {
    if (!this->new_track_event_msg().IsInitialized()) return false;
  }
  if (has_track_removed_event_msg()) {
    if (!this->track_removed_event_msg().IsInitialized()) return false;
  }
  if (has_track_data_msg()) {
    if (!this->track_data_msg().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DataRecord::Swap(DataRecord* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(file_id_msg_, other->file_id_msg_);
    std::swap(unknown_id_msg_, other->unknown_id_msg_);
    std::swap(marker_msg_, other->marker_msg_);
    std::swap(input_device_msg_, other->input_device_msg_);
    std::swap(new_player_event_msg_, other->new_player_event_msg_);
    std::swap(player_removed_event_msg_, other->player_removed_event_msg_);
    std::swap(player_data_msg_, other->player_data_msg_);
    std::swap(player_damaged_event_msg_, other->player_damaged_event_msg_);
    std::swap(player_collision_event_msg_, other->player_collision_event_msg_);
    std::swap(player_crash_event_msg_, other->player_crash_event_msg_);
    std::swap(player_killed_event_msg_, other->player_killed_event_msg_);
    std::swap(weapon_release_event_msg_, other->weapon_release_event_msg_);
    std::swap(weapon_hung_event_msg_, other->weapon_hung_event_msg_);
    std::swap(weapon_detonation_event_msg_, other->weapon_detonation_event_msg_);
    std::swap(gun_fired_event_msg_, other->gun_fired_event_msg_);
    std::swap(new_track_event_msg_, other->new_track_event_msg_);
    std::swap(track_removed_event_msg_, other->track_removed_event_msg_);
    std::swap(track_data_msg_, other->track_data_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata DataRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DataRecord_descriptor_;
  metadata.reflection = DataRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FileIdMsg::kEventNameFieldNumber;
const int FileIdMsg::kApplicationFieldNumber;
const int FileIdMsg::kCaseNumFieldNumber;
const int FileIdMsg::kMissionNumFieldNumber;
const int FileIdMsg::kSubjectNumFieldNumber;
const int FileIdMsg::kRunNumFieldNumber;
const int FileIdMsg::kDayFieldNumber;
const int FileIdMsg::kMonthFieldNumber;
const int FileIdMsg::kYearFieldNumber;
#endif  // !_MSC_VER

FileIdMsg::FileIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FileIdMsg::InitAsDefaultInstance() {
}

FileIdMsg::FileIdMsg(const FileIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FileIdMsg::SharedCtor() {
  _cached_size_ = 0;
  event_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  application_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  case_num_ = 0u;
  mission_num_ = 0u;
  subject_num_ = 0u;
  run_num_ = 0u;
  day_ = 0u;
  month_ = 0u;
  year_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileIdMsg::~FileIdMsg() {
  SharedDtor();
}

void FileIdMsg::SharedDtor() {
  if (event_name_ != &::google::protobuf::internal::kEmptyString) {
    delete event_name_;
  }
  if (application_ != &::google::protobuf::internal::kEmptyString) {
    delete application_;
  }
  if (this != default_instance_) {
  }
}

void FileIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileIdMsg_descriptor_;
}

const FileIdMsg& FileIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

FileIdMsg* FileIdMsg::default_instance_ = NULL;

FileIdMsg* FileIdMsg::New() const {
  return new FileIdMsg;
}

void FileIdMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_event_name()) {
      if (event_name_ != &::google::protobuf::internal::kEmptyString) {
        event_name_->clear();
      }
    }
    if (has_application()) {
      if (application_ != &::google::protobuf::internal::kEmptyString) {
        application_->clear();
      }
    }
    case_num_ = 0u;
    mission_num_ = 0u;
    subject_num_ = 0u;
    run_num_ = 0u;
    day_ = 0u;
    month_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    year_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FileIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->event_name().data(), this->event_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_application;
        break;
      }
      
      // optional string application = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_application:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_application()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->application().data(), this->application().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_case_num;
        break;
      }
      
      // optional uint32 case_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_case_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &case_num_)));
          set_has_case_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mission_num;
        break;
      }
      
      // optional uint32 mission_num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mission_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mission_num_)));
          set_has_mission_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_subject_num;
        break;
      }
      
      // optional uint32 subject_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subject_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subject_num_)));
          set_has_subject_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_run_num;
        break;
      }
      
      // optional uint32 run_num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_num_)));
          set_has_run_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_day;
        break;
      }
      
      // optional uint32 day = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_month;
        break;
      }
      
      // optional uint32 month = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_year;
        break;
      }
      
      // optional uint32 year = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FileIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->event_name(), output);
  }
  
  // optional string application = 2;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->application(), output);
  }
  
  // optional uint32 case_num = 3;
  if (has_case_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->case_num(), output);
  }
  
  // optional uint32 mission_num = 4;
  if (has_mission_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->mission_num(), output);
  }
  
  // optional uint32 subject_num = 5;
  if (has_subject_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->subject_num(), output);
  }
  
  // optional uint32 run_num = 6;
  if (has_run_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->run_num(), output);
  }
  
  // optional uint32 day = 7;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->day(), output);
  }
  
  // optional uint32 month = 8;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->month(), output);
  }
  
  // optional uint32 year = 9;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->year(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FileIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string event_name = 1;
  if (has_event_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->event_name().data(), this->event_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }
  
  // optional string application = 2;
  if (has_application()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->application().data(), this->application().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->application(), target);
  }
  
  // optional uint32 case_num = 3;
  if (has_case_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->case_num(), target);
  }
  
  // optional uint32 mission_num = 4;
  if (has_mission_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->mission_num(), target);
  }
  
  // optional uint32 subject_num = 5;
  if (has_subject_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->subject_num(), target);
  }
  
  // optional uint32 run_num = 6;
  if (has_run_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->run_num(), target);
  }
  
  // optional uint32 day = 7;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->day(), target);
  }
  
  // optional uint32 month = 8;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->month(), target);
  }
  
  // optional uint32 year = 9;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->year(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FileIdMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string event_name = 1;
    if (has_event_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }
    
    // optional string application = 2;
    if (has_application()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->application());
    }
    
    // optional uint32 case_num = 3;
    if (has_case_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->case_num());
    }
    
    // optional uint32 mission_num = 4;
    if (has_mission_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mission_num());
    }
    
    // optional uint32 subject_num = 5;
    if (has_subject_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subject_num());
    }
    
    // optional uint32 run_num = 6;
    if (has_run_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run_num());
    }
    
    // optional uint32 day = 7;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->day());
    }
    
    // optional uint32 month = 8;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->month());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 year = 9;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->year());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FileIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FileIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FileIdMsg::MergeFrom(const FileIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_name()) {
      set_event_name(from.event_name());
    }
    if (from.has_application()) {
      set_application(from.application());
    }
    if (from.has_case_num()) {
      set_case_num(from.case_num());
    }
    if (from.has_mission_num()) {
      set_mission_num(from.mission_num());
    }
    if (from.has_subject_num()) {
      set_subject_num(from.subject_num());
    }
    if (from.has_run_num()) {
      set_run_num(from.run_num());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FileIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileIdMsg::CopyFrom(const FileIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileIdMsg::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void FileIdMsg::Swap(FileIdMsg* other) {
  if (other != this) {
    std::swap(event_name_, other->event_name_);
    std::swap(application_, other->application_);
    std::swap(case_num_, other->case_num_);
    std::swap(mission_num_, other->mission_num_);
    std::swap(subject_num_, other->subject_num_);
    std::swap(run_num_, other->run_num_);
    std::swap(day_, other->day_);
    std::swap(month_, other->month_);
    std::swap(year_, other->year_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata FileIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileIdMsg_descriptor_;
  metadata.reflection = FileIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnknownIdMsg::kIdFieldNumber;
#endif  // !_MSC_VER

UnknownIdMsg::UnknownIdMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnknownIdMsg::InitAsDefaultInstance() {
}

UnknownIdMsg::UnknownIdMsg(const UnknownIdMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnknownIdMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnknownIdMsg::~UnknownIdMsg() {
  SharedDtor();
}

void UnknownIdMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnknownIdMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnknownIdMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnknownIdMsg_descriptor_;
}

const UnknownIdMsg& UnknownIdMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

UnknownIdMsg* UnknownIdMsg::default_instance_ = NULL;

UnknownIdMsg* UnknownIdMsg::New() const {
  return new UnknownIdMsg;
}

void UnknownIdMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnknownIdMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnknownIdMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnknownIdMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnknownIdMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnknownIdMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnknownIdMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnknownIdMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnknownIdMsg::MergeFrom(const UnknownIdMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnknownIdMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnknownIdMsg::CopyFrom(const UnknownIdMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnknownIdMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnknownIdMsg::Swap(UnknownIdMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnknownIdMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnknownIdMsg_descriptor_;
  metadata.reflection = UnknownIdMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarkerMsg::kIdFieldNumber;
const int MarkerMsg::kSourceIdFieldNumber;
#endif  // !_MSC_VER

MarkerMsg::MarkerMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarkerMsg::InitAsDefaultInstance() {
}

MarkerMsg::MarkerMsg(const MarkerMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarkerMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  source_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarkerMsg::~MarkerMsg() {
  SharedDtor();
}

void MarkerMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarkerMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarkerMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarkerMsg_descriptor_;
}

const MarkerMsg& MarkerMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

MarkerMsg* MarkerMsg::default_instance_ = NULL;

MarkerMsg* MarkerMsg::New() const {
  return new MarkerMsg;
}

void MarkerMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    source_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarkerMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }
      
      // optional uint32 source_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarkerMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarkerMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 source_id = 2;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarkerMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarkerMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarkerMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarkerMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarkerMsg::MergeFrom(const MarkerMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarkerMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarkerMsg::CopyFrom(const MarkerMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarkerMsg::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void MarkerMsg::Swap(MarkerMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(source_id_, other->source_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata MarkerMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarkerMsg_descriptor_;
  metadata.reflection = MarkerMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputDeviceMsg::kIdFieldNumber;
const int InputDeviceMsg::kSourceIdFieldNumber;
const int InputDeviceMsg::kValueFieldNumber;
#endif  // !_MSC_VER

InputDeviceMsg::InputDeviceMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InputDeviceMsg::InitAsDefaultInstance() {
}

InputDeviceMsg::InputDeviceMsg(const InputDeviceMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InputDeviceMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  source_id_ = 0u;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputDeviceMsg::~InputDeviceMsg() {
  SharedDtor();
}

void InputDeviceMsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputDeviceMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputDeviceMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputDeviceMsg_descriptor_;
}

const InputDeviceMsg& InputDeviceMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

InputDeviceMsg* InputDeviceMsg::default_instance_ = NULL;

InputDeviceMsg* InputDeviceMsg::New() const {
  return new InputDeviceMsg;
}

void InputDeviceMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    source_id_ = 0u;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputDeviceMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_source_id;
        break;
      }
      
      // optional uint32 source_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_source_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_id_)));
          set_has_source_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_value;
        break;
      }
      
      // optional float value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputDeviceMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional uint32 source_id = 2;
  if (has_source_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_id(), output);
  }
  
  // optional float value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InputDeviceMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional uint32 source_id = 2;
  if (has_source_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_id(), target);
  }
  
  // optional float value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InputDeviceMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional uint32 source_id = 2;
    if (has_source_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_id());
    }
    
    // optional float value = 3;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputDeviceMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputDeviceMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputDeviceMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputDeviceMsg::MergeFrom(const InputDeviceMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_source_id()) {
      set_source_id(from.source_id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputDeviceMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputDeviceMsg::CopyFrom(const InputDeviceMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputDeviceMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void InputDeviceMsg::Swap(InputDeviceMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(source_id_, other->source_id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata InputDeviceMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputDeviceMsg_descriptor_;
  metadata.reflection = InputDeviceMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewPlayerEventMsg::kIdFieldNumber;
const int NewPlayerEventMsg::kStateFieldNumber;
#endif  // !_MSC_VER

NewPlayerEventMsg::NewPlayerEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewPlayerEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
}

NewPlayerEventMsg::NewPlayerEventMsg(const NewPlayerEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewPlayerEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewPlayerEventMsg::~NewPlayerEventMsg() {
  SharedDtor();
}

void NewPlayerEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
  }
}

void NewPlayerEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPlayerEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewPlayerEventMsg_descriptor_;
}

const NewPlayerEventMsg& NewPlayerEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

NewPlayerEventMsg* NewPlayerEventMsg::default_instance_ = NULL;

NewPlayerEventMsg* NewPlayerEventMsg::New() const {
  return new NewPlayerEventMsg;
}

void NewPlayerEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewPlayerEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // required .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewPlayerEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewPlayerEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewPlayerEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPlayerEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewPlayerEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewPlayerEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewPlayerEventMsg::MergeFrom(const NewPlayerEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewPlayerEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPlayerEventMsg::CopyFrom(const NewPlayerEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPlayerEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NewPlayerEventMsg::Swap(NewPlayerEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NewPlayerEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewPlayerEventMsg_descriptor_;
  metadata.reflection = NewPlayerEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerRemovedEventMsg::kIdFieldNumber;
const int PlayerRemovedEventMsg::kStateFieldNumber;
#endif  // !_MSC_VER

PlayerRemovedEventMsg::PlayerRemovedEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerRemovedEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
}

PlayerRemovedEventMsg::PlayerRemovedEventMsg(const PlayerRemovedEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerRemovedEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerRemovedEventMsg::~PlayerRemovedEventMsg() {
  SharedDtor();
}

void PlayerRemovedEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
  }
}

void PlayerRemovedEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerRemovedEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerRemovedEventMsg_descriptor_;
}

const PlayerRemovedEventMsg& PlayerRemovedEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerRemovedEventMsg* PlayerRemovedEventMsg::default_instance_ = NULL;

PlayerRemovedEventMsg* PlayerRemovedEventMsg::New() const {
  return new PlayerRemovedEventMsg;
}

void PlayerRemovedEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerRemovedEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerRemovedEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerRemovedEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerRemovedEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerRemovedEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerRemovedEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerRemovedEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerRemovedEventMsg::MergeFrom(const PlayerRemovedEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerRemovedEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerRemovedEventMsg::CopyFrom(const PlayerRemovedEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerRemovedEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerRemovedEventMsg::Swap(PlayerRemovedEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerRemovedEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerRemovedEventMsg_descriptor_;
  metadata.reflection = PlayerRemovedEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDataMsg::kIdFieldNumber;
const int PlayerDataMsg::kStateFieldNumber;
const int PlayerDataMsg::kAlphaFieldNumber;
const int PlayerDataMsg::kBetaFieldNumber;
const int PlayerDataMsg::kCasFieldNumber;
#endif  // !_MSC_VER

PlayerDataMsg::PlayerDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDataMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
}

PlayerDataMsg::PlayerDataMsg(const PlayerDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDataMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  alpha_ = 0;
  beta_ = 0;
  cas_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDataMsg::~PlayerDataMsg() {
  SharedDtor();
}

void PlayerDataMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
  }
}

void PlayerDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDataMsg_descriptor_;
}

const PlayerDataMsg& PlayerDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerDataMsg* PlayerDataMsg::default_instance_ = NULL;

PlayerDataMsg* PlayerDataMsg::New() const {
  return new PlayerDataMsg;
}

void PlayerDataMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    alpha_ = 0;
    beta_ = 0;
    cas_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // required .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_alpha;
        break;
      }
      
      // optional double alpha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_beta;
        break;
      }
      
      // optional double beta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_cas;
        break;
      }
      
      // optional double cas = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cas:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cas_)));
          set_has_cas();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // required .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // optional double alpha = 3;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->alpha(), output);
  }
  
  // optional double beta = 4;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->beta(), output);
  }
  
  // optional double cas = 5;
  if (has_cas()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->cas(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // required .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // optional double alpha = 3;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->alpha(), target);
  }
  
  // optional double beta = 4;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->beta(), target);
  }
  
  // optional double cas = 5;
  if (has_cas()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->cas(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDataMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // required .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional double alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 8;
    }
    
    // optional double beta = 4;
    if (has_beta()) {
      total_size += 1 + 8;
    }
    
    // optional double cas = 5;
    if (has_cas()) {
      total_size += 1 + 8;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDataMsg::MergeFrom(const PlayerDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_cas()) {
      set_cas(from.cas());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDataMsg::CopyFrom(const PlayerDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDataMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerDataMsg::Swap(PlayerDataMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(cas_, other->cas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDataMsg_descriptor_;
  metadata.reflection = PlayerDataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerDamagedEventMsg::kIdFieldNumber;
const int PlayerDamagedEventMsg::kStateFieldNumber;
#endif  // !_MSC_VER

PlayerDamagedEventMsg::PlayerDamagedEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerDamagedEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
}

PlayerDamagedEventMsg::PlayerDamagedEventMsg(const PlayerDamagedEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerDamagedEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerDamagedEventMsg::~PlayerDamagedEventMsg() {
  SharedDtor();
}

void PlayerDamagedEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
  }
}

void PlayerDamagedEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerDamagedEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerDamagedEventMsg_descriptor_;
}

const PlayerDamagedEventMsg& PlayerDamagedEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerDamagedEventMsg* PlayerDamagedEventMsg::default_instance_ = NULL;

PlayerDamagedEventMsg* PlayerDamagedEventMsg::New() const {
  return new PlayerDamagedEventMsg;
}

void PlayerDamagedEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerDamagedEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerDamagedEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerDamagedEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerDamagedEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerDamagedEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerDamagedEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerDamagedEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerDamagedEventMsg::MergeFrom(const PlayerDamagedEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerDamagedEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerDamagedEventMsg::CopyFrom(const PlayerDamagedEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerDamagedEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerDamagedEventMsg::Swap(PlayerDamagedEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerDamagedEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerDamagedEventMsg_descriptor_;
  metadata.reflection = PlayerDamagedEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCollisionEventMsg::kIdFieldNumber;
const int PlayerCollisionEventMsg::kStateFieldNumber;
const int PlayerCollisionEventMsg::kOtherPlayerIdFieldNumber;
#endif  // !_MSC_VER

PlayerCollisionEventMsg::PlayerCollisionEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCollisionEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  other_player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

PlayerCollisionEventMsg::PlayerCollisionEventMsg(const PlayerCollisionEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCollisionEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  other_player_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCollisionEventMsg::~PlayerCollisionEventMsg() {
  SharedDtor();
}

void PlayerCollisionEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
    delete other_player_id_;
  }
}

void PlayerCollisionEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCollisionEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCollisionEventMsg_descriptor_;
}

const PlayerCollisionEventMsg& PlayerCollisionEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerCollisionEventMsg* PlayerCollisionEventMsg::default_instance_ = NULL;

PlayerCollisionEventMsg* PlayerCollisionEventMsg::New() const {
  return new PlayerCollisionEventMsg;
}

void PlayerCollisionEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_other_player_id()) {
      if (other_player_id_ != NULL) other_player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCollisionEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other_player_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId other_player_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCollisionEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId other_player_id = 3;
  if (has_other_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->other_player_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCollisionEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId other_player_id = 3;
  if (has_other_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->other_player_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCollisionEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId other_player_id = 3;
    if (has_other_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other_player_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCollisionEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCollisionEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCollisionEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCollisionEventMsg::MergeFrom(const PlayerCollisionEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
    if (from.has_other_player_id()) {
      mutable_other_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.other_player_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCollisionEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCollisionEventMsg::CopyFrom(const PlayerCollisionEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCollisionEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_other_player_id()) {
    if (!this->other_player_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerCollisionEventMsg::Swap(PlayerCollisionEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(other_player_id_, other->other_player_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerCollisionEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCollisionEventMsg_descriptor_;
  metadata.reflection = PlayerCollisionEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerCrashEventMsg::kIdFieldNumber;
const int PlayerCrashEventMsg::kStateFieldNumber;
#endif  // !_MSC_VER

PlayerCrashEventMsg::PlayerCrashEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerCrashEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
}

PlayerCrashEventMsg::PlayerCrashEventMsg(const PlayerCrashEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerCrashEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerCrashEventMsg::~PlayerCrashEventMsg() {
  SharedDtor();
}

void PlayerCrashEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
  }
}

void PlayerCrashEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerCrashEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerCrashEventMsg_descriptor_;
}

const PlayerCrashEventMsg& PlayerCrashEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerCrashEventMsg* PlayerCrashEventMsg::default_instance_ = NULL;

PlayerCrashEventMsg* PlayerCrashEventMsg::New() const {
  return new PlayerCrashEventMsg;
}

void PlayerCrashEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerCrashEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerCrashEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerCrashEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerCrashEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerCrashEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerCrashEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerCrashEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerCrashEventMsg::MergeFrom(const PlayerCrashEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerCrashEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerCrashEventMsg::CopyFrom(const PlayerCrashEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerCrashEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerCrashEventMsg::Swap(PlayerCrashEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerCrashEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerCrashEventMsg_descriptor_;
  metadata.reflection = PlayerCrashEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerKilledEventMsg::kIdFieldNumber;
const int PlayerKilledEventMsg::kStateFieldNumber;
const int PlayerKilledEventMsg::kShooterIdFieldNumber;
#endif  // !_MSC_VER

PlayerKilledEventMsg::PlayerKilledEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerKilledEventMsg::InitAsDefaultInstance() {
  id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  shooter_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

PlayerKilledEventMsg::PlayerKilledEventMsg(const PlayerKilledEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerKilledEventMsg::SharedCtor() {
  _cached_size_ = 0;
  id_ = NULL;
  state_ = NULL;
  shooter_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerKilledEventMsg::~PlayerKilledEventMsg() {
  SharedDtor();
}

void PlayerKilledEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete id_;
    delete state_;
    delete shooter_id_;
  }
}

void PlayerKilledEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerKilledEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerKilledEventMsg_descriptor_;
}

const PlayerKilledEventMsg& PlayerKilledEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerKilledEventMsg* PlayerKilledEventMsg::default_instance_ = NULL;

PlayerKilledEventMsg* PlayerKilledEventMsg::New() const {
  return new PlayerKilledEventMsg;
}

void PlayerKilledEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != NULL) id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_state()) {
      if (state_ != NULL) state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_shooter_id()) {
      if (shooter_id_ != NULL) shooter_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerKilledEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shooter_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shooter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerKilledEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shooter_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerKilledEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shooter_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerKilledEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerKilledEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerKilledEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerKilledEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerKilledEventMsg::MergeFrom(const PlayerKilledEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      mutable_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.id());
    }
    if (from.has_state()) {
      mutable_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.state());
    }
    if (from.has_shooter_id()) {
      mutable_shooter_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.shooter_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerKilledEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerKilledEventMsg::CopyFrom(const PlayerKilledEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerKilledEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_id()) {
    if (!this->id().IsInitialized()) return false;
  }
  if (has_state()) {
    if (!this->state().IsInitialized()) return false;
  }
  if (has_shooter_id()) {
    if (!this->shooter_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerKilledEventMsg::Swap(PlayerKilledEventMsg* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(shooter_id_, other->shooter_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerKilledEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerKilledEventMsg_descriptor_;
  metadata.reflection = PlayerKilledEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponReleaseEventMsg::kWpnIdFieldNumber;
const int WeaponReleaseEventMsg::kWpnStateFieldNumber;
const int WeaponReleaseEventMsg::kShooterIdFieldNumber;
const int WeaponReleaseEventMsg::kTgtIdFieldNumber;
#endif  // !_MSC_VER

WeaponReleaseEventMsg::WeaponReleaseEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponReleaseEventMsg::InitAsDefaultInstance() {
  wpn_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  wpn_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  shooter_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  tgt_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

WeaponReleaseEventMsg::WeaponReleaseEventMsg(const WeaponReleaseEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponReleaseEventMsg::SharedCtor() {
  _cached_size_ = 0;
  wpn_id_ = NULL;
  wpn_state_ = NULL;
  shooter_id_ = NULL;
  tgt_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponReleaseEventMsg::~WeaponReleaseEventMsg() {
  SharedDtor();
}

void WeaponReleaseEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete wpn_id_;
    delete wpn_state_;
    delete shooter_id_;
    delete tgt_id_;
  }
}

void WeaponReleaseEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponReleaseEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponReleaseEventMsg_descriptor_;
}

const WeaponReleaseEventMsg& WeaponReleaseEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

WeaponReleaseEventMsg* WeaponReleaseEventMsg::default_instance_ = NULL;

WeaponReleaseEventMsg* WeaponReleaseEventMsg::New() const {
  return new WeaponReleaseEventMsg;
}

void WeaponReleaseEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wpn_id()) {
      if (wpn_id_ != NULL) wpn_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_wpn_state()) {
      if (wpn_state_ != NULL) wpn_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_shooter_id()) {
      if (shooter_id_ != NULL) shooter_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_tgt_id()) {
      if (tgt_id_ != NULL) tgt_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponReleaseEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wpn_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wpn_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shooter_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shooter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tgt_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tgt_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tgt_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponReleaseEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wpn_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wpn_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shooter_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tgt_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponReleaseEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wpn_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wpn_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shooter_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tgt_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponReleaseEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
    if (has_wpn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
    if (has_wpn_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
    if (has_tgt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tgt_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponReleaseEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponReleaseEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponReleaseEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponReleaseEventMsg::MergeFrom(const WeaponReleaseEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wpn_id()) {
      mutable_wpn_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.wpn_id());
    }
    if (from.has_wpn_state()) {
      mutable_wpn_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.wpn_state());
    }
    if (from.has_shooter_id()) {
      mutable_shooter_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.shooter_id());
    }
    if (from.has_tgt_id()) {
      mutable_tgt_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.tgt_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponReleaseEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponReleaseEventMsg::CopyFrom(const WeaponReleaseEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponReleaseEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_wpn_id()) {
    if (!this->wpn_id().IsInitialized()) return false;
  }
  if (has_wpn_state()) {
    if (!this->wpn_state().IsInitialized()) return false;
  }
  if (has_shooter_id()) {
    if (!this->shooter_id().IsInitialized()) return false;
  }
  if (has_tgt_id()) {
    if (!this->tgt_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WeaponReleaseEventMsg::Swap(WeaponReleaseEventMsg* other) {
  if (other != this) {
    std::swap(wpn_id_, other->wpn_id_);
    std::swap(wpn_state_, other->wpn_state_);
    std::swap(shooter_id_, other->shooter_id_);
    std::swap(tgt_id_, other->tgt_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WeaponReleaseEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponReleaseEventMsg_descriptor_;
  metadata.reflection = WeaponReleaseEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponHungEventMsg::kWpnIdFieldNumber;
const int WeaponHungEventMsg::kWpnStateFieldNumber;
const int WeaponHungEventMsg::kShooterIdFieldNumber;
const int WeaponHungEventMsg::kTgtIdFieldNumber;
#endif  // !_MSC_VER

WeaponHungEventMsg::WeaponHungEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponHungEventMsg::InitAsDefaultInstance() {
  wpn_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  wpn_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  shooter_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  tgt_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

WeaponHungEventMsg::WeaponHungEventMsg(const WeaponHungEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponHungEventMsg::SharedCtor() {
  _cached_size_ = 0;
  wpn_id_ = NULL;
  wpn_state_ = NULL;
  shooter_id_ = NULL;
  tgt_id_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponHungEventMsg::~WeaponHungEventMsg() {
  SharedDtor();
}

void WeaponHungEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete wpn_id_;
    delete wpn_state_;
    delete shooter_id_;
    delete tgt_id_;
  }
}

void WeaponHungEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponHungEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponHungEventMsg_descriptor_;
}

const WeaponHungEventMsg& WeaponHungEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

WeaponHungEventMsg* WeaponHungEventMsg::default_instance_ = NULL;

WeaponHungEventMsg* WeaponHungEventMsg::New() const {
  return new WeaponHungEventMsg;
}

void WeaponHungEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wpn_id()) {
      if (wpn_id_ != NULL) wpn_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_wpn_state()) {
      if (wpn_state_ != NULL) wpn_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_shooter_id()) {
      if (shooter_id_ != NULL) shooter_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_tgt_id()) {
      if (tgt_id_ != NULL) tgt_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponHungEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wpn_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wpn_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shooter_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shooter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tgt_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tgt_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tgt_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponHungEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wpn_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wpn_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shooter_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tgt_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponHungEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wpn_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wpn_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shooter_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tgt_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponHungEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
    if (has_wpn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
    if (has_wpn_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
    if (has_tgt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tgt_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponHungEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponHungEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponHungEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponHungEventMsg::MergeFrom(const WeaponHungEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wpn_id()) {
      mutable_wpn_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.wpn_id());
    }
    if (from.has_wpn_state()) {
      mutable_wpn_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.wpn_state());
    }
    if (from.has_shooter_id()) {
      mutable_shooter_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.shooter_id());
    }
    if (from.has_tgt_id()) {
      mutable_tgt_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.tgt_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponHungEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponHungEventMsg::CopyFrom(const WeaponHungEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponHungEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_wpn_id()) {
    if (!this->wpn_id().IsInitialized()) return false;
  }
  if (has_wpn_state()) {
    if (!this->wpn_state().IsInitialized()) return false;
  }
  if (has_shooter_id()) {
    if (!this->shooter_id().IsInitialized()) return false;
  }
  if (has_tgt_id()) {
    if (!this->tgt_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WeaponHungEventMsg::Swap(WeaponHungEventMsg* other) {
  if (other != this) {
    std::swap(wpn_id_, other->wpn_id_);
    std::swap(wpn_state_, other->wpn_state_);
    std::swap(shooter_id_, other->shooter_id_);
    std::swap(tgt_id_, other->tgt_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WeaponHungEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponHungEventMsg_descriptor_;
  metadata.reflection = WeaponHungEventMsg_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* WeaponDetonationEventMsg_DetonationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponDetonationEventMsg_DetonationType_descriptor_;
}
bool WeaponDetonationEventMsg_DetonationType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_OTHER;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_ENTITY_IMPACT;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_ENTITY_PROXIMATE_DETONATION;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_GROUND_IMPACT;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_GROUND_PROXIMATE_DETONATION;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_DETONATION;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DETONATE_NONE;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DetonationType_MIN;
const WeaponDetonationEventMsg_DetonationType WeaponDetonationEventMsg::DetonationType_MAX;
const int WeaponDetonationEventMsg::DetonationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int WeaponDetonationEventMsg::kWpnIdFieldNumber;
const int WeaponDetonationEventMsg::kWpnStateFieldNumber;
const int WeaponDetonationEventMsg::kShooterIdFieldNumber;
const int WeaponDetonationEventMsg::kTgtIdFieldNumber;
const int WeaponDetonationEventMsg::kDetTypeFieldNumber;
const int WeaponDetonationEventMsg::kMissDistFieldNumber;
#endif  // !_MSC_VER

WeaponDetonationEventMsg::WeaponDetonationEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponDetonationEventMsg::InitAsDefaultInstance() {
  wpn_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  wpn_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  shooter_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  tgt_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

WeaponDetonationEventMsg::WeaponDetonationEventMsg(const WeaponDetonationEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponDetonationEventMsg::SharedCtor() {
  _cached_size_ = 0;
  wpn_id_ = NULL;
  wpn_state_ = NULL;
  shooter_id_ = NULL;
  tgt_id_ = NULL;
  det_type_ = 0;
  miss_dist_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponDetonationEventMsg::~WeaponDetonationEventMsg() {
  SharedDtor();
}

void WeaponDetonationEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete wpn_id_;
    delete wpn_state_;
    delete shooter_id_;
    delete tgt_id_;
  }
}

void WeaponDetonationEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponDetonationEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponDetonationEventMsg_descriptor_;
}

const WeaponDetonationEventMsg& WeaponDetonationEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

WeaponDetonationEventMsg* WeaponDetonationEventMsg::default_instance_ = NULL;

WeaponDetonationEventMsg* WeaponDetonationEventMsg::New() const {
  return new WeaponDetonationEventMsg;
}

void WeaponDetonationEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wpn_id()) {
      if (wpn_id_ != NULL) wpn_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_wpn_state()) {
      if (wpn_state_ != NULL) wpn_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_shooter_id()) {
      if (shooter_id_ != NULL) shooter_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_tgt_id()) {
      if (tgt_id_ != NULL) tgt_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    det_type_ = 0;
    miss_dist_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponDetonationEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_wpn_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wpn_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wpn_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_shooter_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shooter_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tgt_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tgt_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tgt_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_det_type;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg.DetonationType det_type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_det_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Eaagles::Recorder::Pb::WeaponDetonationEventMsg_DetonationType_IsValid(value)) {
            set_det_type(static_cast< ::Eaagles::Recorder::Pb::WeaponDetonationEventMsg_DetonationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_miss_dist;
        break;
      }
      
      // optional double miss_dist = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_miss_dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &miss_dist_)));
          set_has_miss_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponDetonationEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wpn_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wpn_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->shooter_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tgt_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg.DetonationType det_type = 5;
  if (has_det_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->det_type(), output);
  }
  
  // optional double miss_dist = 6;
  if (has_miss_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->miss_dist(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponDetonationEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
  if (has_wpn_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wpn_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
  if (has_wpn_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wpn_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->shooter_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
  if (has_tgt_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tgt_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg.DetonationType det_type = 5;
  if (has_det_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->det_type(), target);
  }
  
  // optional double miss_dist = 6;
  if (has_miss_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->miss_dist(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponDetonationEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId wpn_id = 1;
    if (has_wpn_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState wpn_state = 2;
    if (has_wpn_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wpn_state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId shooter_id = 3;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId tgt_id = 4;
    if (has_tgt_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tgt_id());
    }
    
    // optional .Eaagles.Recorder.Pb.WeaponDetonationEventMsg.DetonationType det_type = 5;
    if (has_det_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->det_type());
    }
    
    // optional double miss_dist = 6;
    if (has_miss_dist()) {
      total_size += 1 + 8;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponDetonationEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponDetonationEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponDetonationEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponDetonationEventMsg::MergeFrom(const WeaponDetonationEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wpn_id()) {
      mutable_wpn_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.wpn_id());
    }
    if (from.has_wpn_state()) {
      mutable_wpn_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.wpn_state());
    }
    if (from.has_shooter_id()) {
      mutable_shooter_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.shooter_id());
    }
    if (from.has_tgt_id()) {
      mutable_tgt_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.tgt_id());
    }
    if (from.has_det_type()) {
      set_det_type(from.det_type());
    }
    if (from.has_miss_dist()) {
      set_miss_dist(from.miss_dist());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponDetonationEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponDetonationEventMsg::CopyFrom(const WeaponDetonationEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponDetonationEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_wpn_id()) {
    if (!this->wpn_id().IsInitialized()) return false;
  }
  if (has_wpn_state()) {
    if (!this->wpn_state().IsInitialized()) return false;
  }
  if (has_shooter_id()) {
    if (!this->shooter_id().IsInitialized()) return false;
  }
  if (has_tgt_id()) {
    if (!this->tgt_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void WeaponDetonationEventMsg::Swap(WeaponDetonationEventMsg* other) {
  if (other != this) {
    std::swap(wpn_id_, other->wpn_id_);
    std::swap(wpn_state_, other->wpn_state_);
    std::swap(shooter_id_, other->shooter_id_);
    std::swap(tgt_id_, other->tgt_id_);
    std::swap(det_type_, other->det_type_);
    std::swap(miss_dist_, other->miss_dist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata WeaponDetonationEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponDetonationEventMsg_descriptor_;
  metadata.reflection = WeaponDetonationEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GunFiredEventMsg::kShooterIdFieldNumber;
const int GunFiredEventMsg::kRoundsFieldNumber;
#endif  // !_MSC_VER

GunFiredEventMsg::GunFiredEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GunFiredEventMsg::InitAsDefaultInstance() {
  shooter_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

GunFiredEventMsg::GunFiredEventMsg(const GunFiredEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GunFiredEventMsg::SharedCtor() {
  _cached_size_ = 0;
  shooter_id_ = NULL;
  rounds_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GunFiredEventMsg::~GunFiredEventMsg() {
  SharedDtor();
}

void GunFiredEventMsg::SharedDtor() {
  if (this != default_instance_) {
    delete shooter_id_;
  }
}

void GunFiredEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GunFiredEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GunFiredEventMsg_descriptor_;
}

const GunFiredEventMsg& GunFiredEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

GunFiredEventMsg* GunFiredEventMsg::default_instance_ = NULL;

GunFiredEventMsg* GunFiredEventMsg::New() const {
  return new GunFiredEventMsg;
}

void GunFiredEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_shooter_id()) {
      if (shooter_id_ != NULL) shooter_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    rounds_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GunFiredEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId shooter_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rounds;
        break;
      }
      
      // optional uint32 rounds = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rounds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rounds_)));
          set_has_rounds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GunFiredEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId shooter_id = 1;
  if (has_shooter_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shooter_id(), output);
  }
  
  // optional uint32 rounds = 2;
  if (has_rounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rounds(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GunFiredEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId shooter_id = 1;
  if (has_shooter_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shooter_id(), target);
  }
  
  // optional uint32 rounds = 2;
  if (has_rounds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rounds(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GunFiredEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId shooter_id = 1;
    if (has_shooter_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_id());
    }
    
    // optional uint32 rounds = 2;
    if (has_rounds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rounds());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GunFiredEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GunFiredEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GunFiredEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GunFiredEventMsg::MergeFrom(const GunFiredEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shooter_id()) {
      mutable_shooter_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.shooter_id());
    }
    if (from.has_rounds()) {
      set_rounds(from.rounds());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GunFiredEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GunFiredEventMsg::CopyFrom(const GunFiredEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GunFiredEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_shooter_id()) {
    if (!this->shooter_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void GunFiredEventMsg::Swap(GunFiredEventMsg* other) {
  if (other != this) {
    std::swap(shooter_id_, other->shooter_id_);
    std::swap(rounds_, other->rounds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata GunFiredEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GunFiredEventMsg_descriptor_;
  metadata.reflection = GunFiredEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewTrackEventMsg::kPlayerIdFieldNumber;
const int NewTrackEventMsg::kTrackIdFieldNumber;
const int NewTrackEventMsg::kTrackDataFieldNumber;
const int NewTrackEventMsg::kPlayerStateFieldNumber;
const int NewTrackEventMsg::kTrkPlayerIdFieldNumber;
const int NewTrackEventMsg::kTrkPlayerStateFieldNumber;
const int NewTrackEventMsg::kEmissionDataFieldNumber;
#endif  // !_MSC_VER

NewTrackEventMsg::NewTrackEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewTrackEventMsg::InitAsDefaultInstance() {
  player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  track_data_ = const_cast< ::Eaagles::Recorder::Pb::TrackData*>(&::Eaagles::Recorder::Pb::TrackData::default_instance());
  player_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  trk_player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  trk_player_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  emission_data_ = const_cast< ::Eaagles::Recorder::Pb::EmissionData*>(&::Eaagles::Recorder::Pb::EmissionData::default_instance());
}

NewTrackEventMsg::NewTrackEventMsg(const NewTrackEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewTrackEventMsg::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  track_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  track_data_ = NULL;
  player_state_ = NULL;
  trk_player_id_ = NULL;
  trk_player_state_ = NULL;
  emission_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewTrackEventMsg::~NewTrackEventMsg() {
  SharedDtor();
}

void NewTrackEventMsg::SharedDtor() {
  if (track_id_ != &::google::protobuf::internal::kEmptyString) {
    delete track_id_;
  }
  if (this != default_instance_) {
    delete player_id_;
    delete track_data_;
    delete player_state_;
    delete trk_player_id_;
    delete trk_player_state_;
    delete emission_data_;
  }
}

void NewTrackEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewTrackEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewTrackEventMsg_descriptor_;
}

const NewTrackEventMsg& NewTrackEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

NewTrackEventMsg* NewTrackEventMsg::default_instance_ = NULL;

NewTrackEventMsg* NewTrackEventMsg::New() const {
  return new NewTrackEventMsg;
}

void NewTrackEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_track_id()) {
      if (track_id_ != &::google::protobuf::internal::kEmptyString) {
        track_id_->clear();
      }
    }
    if (has_track_data()) {
      if (track_data_ != NULL) track_data_->::Eaagles::Recorder::Pb::TrackData::Clear();
    }
    if (has_player_state()) {
      if (player_state_ != NULL) player_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_trk_player_id()) {
      if (trk_player_id_ != NULL) trk_player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_trk_player_state()) {
      if (trk_player_state_ != NULL) trk_player_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_emission_data()) {
      if (emission_data_ != NULL) emission_data_->::Eaagles::Recorder::Pb::EmissionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewTrackEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track_id;
        break;
      }
      
      // required string track_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_id().data(), this->track_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_track_data;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trk_player_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trk_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trk_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_trk_player_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trk_player_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trk_player_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_emission_data;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emission_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emission_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewTrackEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->track_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
  if (has_track_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->track_data(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
  if (has_trk_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trk_player_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
  if (has_trk_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trk_player_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
  if (has_emission_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emission_data(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewTrackEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
  if (has_track_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->track_data(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
  if (has_trk_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trk_player_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
  if (has_trk_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trk_player_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
  if (has_emission_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->emission_data(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewTrackEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }
    
    // required string track_id = 2;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }
    
    // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
    if (has_track_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track_data());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
    if (has_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
    if (has_trk_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trk_player_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
    if (has_trk_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trk_player_state());
    }
    
    // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
    if (has_emission_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emission_data());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewTrackEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewTrackEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewTrackEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewTrackEventMsg::MergeFrom(const NewTrackEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.player_id());
    }
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
    if (from.has_track_data()) {
      mutable_track_data()->::Eaagles::Recorder::Pb::TrackData::MergeFrom(from.track_data());
    }
    if (from.has_player_state()) {
      mutable_player_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.player_state());
    }
    if (from.has_trk_player_id()) {
      mutable_trk_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.trk_player_id());
    }
    if (from.has_trk_player_state()) {
      mutable_trk_player_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.trk_player_state());
    }
    if (from.has_emission_data()) {
      mutable_emission_data()->::Eaagles::Recorder::Pb::EmissionData::MergeFrom(from.emission_data());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewTrackEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewTrackEventMsg::CopyFrom(const NewTrackEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewTrackEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  if (has_track_data()) {
    if (!this->track_data().IsInitialized()) return false;
  }
  if (has_player_state()) {
    if (!this->player_state().IsInitialized()) return false;
  }
  if (has_trk_player_id()) {
    if (!this->trk_player_id().IsInitialized()) return false;
  }
  if (has_trk_player_state()) {
    if (!this->trk_player_state().IsInitialized()) return false;
  }
  if (has_emission_data()) {
    if (!this->emission_data().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void NewTrackEventMsg::Swap(NewTrackEventMsg* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(track_id_, other->track_id_);
    std::swap(track_data_, other->track_data_);
    std::swap(player_state_, other->player_state_);
    std::swap(trk_player_id_, other->trk_player_id_);
    std::swap(trk_player_state_, other->trk_player_state_);
    std::swap(emission_data_, other->emission_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata NewTrackEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewTrackEventMsg_descriptor_;
  metadata.reflection = NewTrackEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackRemovedEventMsg::kPlayerIdFieldNumber;
const int TrackRemovedEventMsg::kTrackIdFieldNumber;
#endif  // !_MSC_VER

TrackRemovedEventMsg::TrackRemovedEventMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackRemovedEventMsg::InitAsDefaultInstance() {
  player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
}

TrackRemovedEventMsg::TrackRemovedEventMsg(const TrackRemovedEventMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackRemovedEventMsg::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  track_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackRemovedEventMsg::~TrackRemovedEventMsg() {
  SharedDtor();
}

void TrackRemovedEventMsg::SharedDtor() {
  if (track_id_ != &::google::protobuf::internal::kEmptyString) {
    delete track_id_;
  }
  if (this != default_instance_) {
    delete player_id_;
  }
}

void TrackRemovedEventMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackRemovedEventMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackRemovedEventMsg_descriptor_;
}

const TrackRemovedEventMsg& TrackRemovedEventMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

TrackRemovedEventMsg* TrackRemovedEventMsg::default_instance_ = NULL;

TrackRemovedEventMsg* TrackRemovedEventMsg::New() const {
  return new TrackRemovedEventMsg;
}

void TrackRemovedEventMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_track_id()) {
      if (track_id_ != &::google::protobuf::internal::kEmptyString) {
        track_id_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackRemovedEventMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track_id;
        break;
      }
      
      // required string track_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_id().data(), this->track_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackRemovedEventMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->track_id(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackRemovedEventMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track_id(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackRemovedEventMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }
    
    // required string track_id = 2;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackRemovedEventMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackRemovedEventMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackRemovedEventMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackRemovedEventMsg::MergeFrom(const TrackRemovedEventMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.player_id());
    }
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackRemovedEventMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackRemovedEventMsg::CopyFrom(const TrackRemovedEventMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackRemovedEventMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TrackRemovedEventMsg::Swap(TrackRemovedEventMsg* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(track_id_, other->track_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TrackRemovedEventMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackRemovedEventMsg_descriptor_;
  metadata.reflection = TrackRemovedEventMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackDataMsg::kPlayerIdFieldNumber;
const int TrackDataMsg::kTrackIdFieldNumber;
const int TrackDataMsg::kTrackDataFieldNumber;
const int TrackDataMsg::kPlayerStateFieldNumber;
const int TrackDataMsg::kTrkPlayerIdFieldNumber;
const int TrackDataMsg::kTrkPlayerStateFieldNumber;
const int TrackDataMsg::kEmissionDataFieldNumber;
#endif  // !_MSC_VER

TrackDataMsg::TrackDataMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackDataMsg::InitAsDefaultInstance() {
  player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  track_data_ = const_cast< ::Eaagles::Recorder::Pb::TrackData*>(&::Eaagles::Recorder::Pb::TrackData::default_instance());
  player_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  trk_player_id_ = const_cast< ::Eaagles::Recorder::Pb::PlayerId*>(&::Eaagles::Recorder::Pb::PlayerId::default_instance());
  trk_player_state_ = const_cast< ::Eaagles::Recorder::Pb::PlayerState*>(&::Eaagles::Recorder::Pb::PlayerState::default_instance());
  emission_data_ = const_cast< ::Eaagles::Recorder::Pb::EmissionData*>(&::Eaagles::Recorder::Pb::EmissionData::default_instance());
}

TrackDataMsg::TrackDataMsg(const TrackDataMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackDataMsg::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = NULL;
  track_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  track_data_ = NULL;
  player_state_ = NULL;
  trk_player_id_ = NULL;
  trk_player_state_ = NULL;
  emission_data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackDataMsg::~TrackDataMsg() {
  SharedDtor();
}

void TrackDataMsg::SharedDtor() {
  if (track_id_ != &::google::protobuf::internal::kEmptyString) {
    delete track_id_;
  }
  if (this != default_instance_) {
    delete player_id_;
    delete track_data_;
    delete player_state_;
    delete trk_player_id_;
    delete trk_player_state_;
    delete emission_data_;
  }
}

void TrackDataMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackDataMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackDataMsg_descriptor_;
}

const TrackDataMsg& TrackDataMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

TrackDataMsg* TrackDataMsg::default_instance_ = NULL;

TrackDataMsg* TrackDataMsg::New() const {
  return new TrackDataMsg;
}

void TrackDataMsg::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_player_id()) {
      if (player_id_ != NULL) player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_track_id()) {
      if (track_id_ != &::google::protobuf::internal::kEmptyString) {
        track_id_->clear();
      }
    }
    if (has_track_data()) {
      if (track_data_ != NULL) track_data_->::Eaagles::Recorder::Pb::TrackData::Clear();
    }
    if (has_player_state()) {
      if (player_state_ != NULL) player_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_trk_player_id()) {
      if (trk_player_id_ != NULL) trk_player_id_->::Eaagles::Recorder::Pb::PlayerId::Clear();
    }
    if (has_trk_player_state()) {
      if (trk_player_state_ != NULL) trk_player_state_->::Eaagles::Recorder::Pb::PlayerState::Clear();
    }
    if (has_emission_data()) {
      if (emission_data_ != NULL) emission_data_->::Eaagles::Recorder::Pb::EmissionData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackDataMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_track_id;
        break;
      }
      
      // required string track_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_track_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->track_id().data(), this->track_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_track_data;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_track_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_player_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_player_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_trk_player_id;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trk_player_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trk_player_id()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_trk_player_state;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trk_player_state:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trk_player_state()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_emission_data;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_emission_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emission_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackDataMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_id(), output);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->track_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
  if (has_track_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->track_data(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
  if (has_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->player_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
  if (has_trk_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trk_player_id(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
  if (has_trk_player_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->trk_player_state(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
  if (has_emission_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->emission_data(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackDataMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_id(), target);
  }
  
  // required string track_id = 2;
  if (has_track_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->track_id().data(), this->track_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->track_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
  if (has_track_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->track_data(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
  if (has_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->player_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
  if (has_trk_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trk_player_id(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
  if (has_trk_player_state()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->trk_player_state(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
  if (has_emission_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->emission_data(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackDataMsg::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.PlayerId player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_id());
    }
    
    // required string track_id = 2;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->track_id());
    }
    
    // optional .Eaagles.Recorder.Pb.TrackData track_data = 3;
    if (has_track_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->track_data());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState player_state = 4;
    if (has_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->player_state());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerId trk_player_id = 5;
    if (has_trk_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trk_player_id());
    }
    
    // optional .Eaagles.Recorder.Pb.PlayerState trk_player_state = 6;
    if (has_trk_player_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trk_player_state());
    }
    
    // optional .Eaagles.Recorder.Pb.EmissionData emission_data = 7;
    if (has_emission_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emission_data());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackDataMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackDataMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackDataMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackDataMsg::MergeFrom(const TrackDataMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      mutable_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.player_id());
    }
    if (from.has_track_id()) {
      set_track_id(from.track_id());
    }
    if (from.has_track_data()) {
      mutable_track_data()->::Eaagles::Recorder::Pb::TrackData::MergeFrom(from.track_data());
    }
    if (from.has_player_state()) {
      mutable_player_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.player_state());
    }
    if (from.has_trk_player_id()) {
      mutable_trk_player_id()->::Eaagles::Recorder::Pb::PlayerId::MergeFrom(from.trk_player_id());
    }
    if (from.has_trk_player_state()) {
      mutable_trk_player_state()->::Eaagles::Recorder::Pb::PlayerState::MergeFrom(from.trk_player_state());
    }
    if (from.has_emission_data()) {
      mutable_emission_data()->::Eaagles::Recorder::Pb::EmissionData::MergeFrom(from.emission_data());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackDataMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackDataMsg::CopyFrom(const TrackDataMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackDataMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_player_id()) {
    if (!this->player_id().IsInitialized()) return false;
  }
  if (has_track_data()) {
    if (!this->track_data().IsInitialized()) return false;
  }
  if (has_player_state()) {
    if (!this->player_state().IsInitialized()) return false;
  }
  if (has_trk_player_id()) {
    if (!this->trk_player_id().IsInitialized()) return false;
  }
  if (has_trk_player_state()) {
    if (!this->trk_player_state().IsInitialized()) return false;
  }
  if (has_emission_data()) {
    if (!this->emission_data().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TrackDataMsg::Swap(TrackDataMsg* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(track_id_, other->track_id_);
    std::swap(track_data_, other->track_data_);
    std::swap(player_state_, other->player_state_);
    std::swap(trk_player_id_, other->trk_player_id_);
    std::swap(trk_player_state_, other->trk_player_state_);
    std::swap(emission_data_, other->emission_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TrackDataMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackDataMsg_descriptor_;
  metadata.reflection = TrackDataMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
const int Vector::kWFieldNumber;
#endif  // !_MSC_VER

Vector::Vector()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  w_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New() const {
  return new Vector;
}

void Vector::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    w_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_y;
        break;
      }
      
      // required double y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_z;
        break;
      }
      
      // optional double z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_w;
        break;
      }
      
      // optional double w = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_w:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
          set_has_w();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // required double y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // optional double z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // optional double w = 4;
  if (has_w()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // required double y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // optional double z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  // optional double w = 4;
  if (has_w()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // required double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // optional double w = 4;
    if (has_w()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_w()) {
      set_w(from.w());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Vector::Swap(Vector* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(w_, other->w_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Time::kSimTimeFieldNumber;
const int Time::kExecTimeFieldNumber;
const int Time::kUtcTimeFieldNumber;
#endif  // !_MSC_VER

Time::Time()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Time::InitAsDefaultInstance() {
}

Time::Time(const Time& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Time::SharedCtor() {
  _cached_size_ = 0;
  sim_time_ = 0;
  exec_time_ = 0;
  utc_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Time::~Time() {
  SharedDtor();
}

void Time::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Time::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Time::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Time_descriptor_;
}

const Time& Time::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

Time* Time::default_instance_ = NULL;

Time* Time::New() const {
  return new Time;
}

void Time::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sim_time_ = 0;
    exec_time_ = 0;
    utc_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Time::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double sim_time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sim_time_)));
          set_has_sim_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_exec_time;
        break;
      }
      
      // optional double exec_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_exec_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &exec_time_)));
          set_has_exec_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_utc_time;
        break;
      }
      
      // optional double utc_time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utc_time_)));
          set_has_utc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Time::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double sim_time = 1;
  if (has_sim_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->sim_time(), output);
  }
  
  // optional double exec_time = 2;
  if (has_exec_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->exec_time(), output);
  }
  
  // optional double utc_time = 3;
  if (has_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->utc_time(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Time::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double sim_time = 1;
  if (has_sim_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->sim_time(), target);
  }
  
  // optional double exec_time = 2;
  if (has_exec_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->exec_time(), target);
  }
  
  // optional double utc_time = 3;
  if (has_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->utc_time(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Time::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double sim_time = 1;
    if (has_sim_time()) {
      total_size += 1 + 8;
    }
    
    // optional double exec_time = 2;
    if (has_exec_time()) {
      total_size += 1 + 8;
    }
    
    // optional double utc_time = 3;
    if (has_utc_time()) {
      total_size += 1 + 8;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Time::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Time* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Time*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Time::MergeFrom(const Time& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sim_time()) {
      set_sim_time(from.sim_time());
    }
    if (from.has_exec_time()) {
      set_exec_time(from.exec_time());
    }
    if (from.has_utc_time()) {
      set_utc_time(from.utc_time());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Time::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Time::CopyFrom(const Time& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Time::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Time::Swap(Time* other) {
  if (other != this) {
    std::swap(sim_time_, other->sim_time_);
    std::swap(exec_time_, other->exec_time_);
    std::swap(utc_time_, other->utc_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata Time::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Time_descriptor_;
  metadata.reflection = Time_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerId::kIdFieldNumber;
const int PlayerId::kNameFieldNumber;
const int PlayerId::kFedNameFieldNumber;
const int PlayerId::kSideFieldNumber;
#endif  // !_MSC_VER

PlayerId::PlayerId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerId::InitAsDefaultInstance() {
}

PlayerId::PlayerId(const PlayerId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerId::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fed_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  side_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerId::~PlayerId() {
  SharedDtor();
}

void PlayerId::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (fed_name_ != &::google::protobuf::internal::kEmptyString) {
    delete fed_name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerId_descriptor_;
}

const PlayerId& PlayerId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerId* PlayerId::default_instance_ = NULL;

PlayerId* PlayerId::New() const {
  return new PlayerId;
}

void PlayerId::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_fed_name()) {
      if (fed_name_ != &::google::protobuf::internal::kEmptyString) {
        fed_name_->clear();
      }
    }
    side_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }
      
      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_fed_name;
        break;
      }
      
      // optional string fed_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fed_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fed_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fed_name().data(), this->fed_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_side;
        break;
      }
      
      // optional uint32 side = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_side:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &side_)));
          set_has_side();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }
  
  // optional string fed_name = 3;
  if (has_fed_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fed_name().data(), this->fed_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->fed_name(), output);
  }
  
  // optional uint32 side = 4;
  if (has_side()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->side(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }
  
  // optional string fed_name = 3;
  if (has_fed_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fed_name().data(), this->fed_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->fed_name(), target);
  }
  
  // optional uint32 side = 4;
  if (has_side()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->side(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerId::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // optional string fed_name = 3;
    if (has_fed_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fed_name());
    }
    
    // optional uint32 side = 4;
    if (has_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->side());
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerId::MergeFrom(const PlayerId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fed_name()) {
      set_fed_name(from.fed_name());
    }
    if (from.has_side()) {
      set_side(from.side());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerId::CopyFrom(const PlayerId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerId::Swap(PlayerId* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(fed_name_, other->fed_name_);
    std::swap(side_, other->side_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerId_descriptor_;
  metadata.reflection = PlayerId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerState::kPosFieldNumber;
const int PlayerState::kAnglesFieldNumber;
const int PlayerState::kVelFieldNumber;
const int PlayerState::kDamageFieldNumber;
#endif  // !_MSC_VER

PlayerState::PlayerState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerState::InitAsDefaultInstance() {
  pos_ = const_cast< ::Eaagles::Recorder::Pb::Vector*>(&::Eaagles::Recorder::Pb::Vector::default_instance());
  angles_ = const_cast< ::Eaagles::Recorder::Pb::Vector*>(&::Eaagles::Recorder::Pb::Vector::default_instance());
  vel_ = const_cast< ::Eaagles::Recorder::Pb::Vector*>(&::Eaagles::Recorder::Pb::Vector::default_instance());
}

PlayerState::PlayerState(const PlayerState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerState::SharedCtor() {
  _cached_size_ = 0;
  pos_ = NULL;
  angles_ = NULL;
  vel_ = NULL;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerState::~PlayerState() {
  SharedDtor();
}

void PlayerState::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
    delete angles_;
    delete vel_;
  }
}

void PlayerState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerState_descriptor_;
}

const PlayerState& PlayerState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

PlayerState* PlayerState::default_instance_ = NULL;

PlayerState* PlayerState::New() const {
  return new PlayerState;
}

void PlayerState::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pos()) {
      if (pos_ != NULL) pos_->::Eaagles::Recorder::Pb::Vector::Clear();
    }
    if (has_angles()) {
      if (angles_ != NULL) angles_->::Eaagles::Recorder::Pb::Vector::Clear();
    }
    if (has_vel()) {
      if (vel_ != NULL) vel_->::Eaagles::Recorder::Pb::Vector::Clear();
    }
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Eaagles.Recorder.Pb.Vector pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_angles;
        break;
      }
      
      // required .Eaagles.Recorder.Pb.Vector angles = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_vel;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.Vector vel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vel()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_damage;
        break;
      }
      
      // optional double damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .Eaagles.Recorder.Pb.Vector pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pos(), output);
  }
  
  // required .Eaagles.Recorder.Pb.Vector angles = 2;
  if (has_angles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->angles(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector vel = 3;
  if (has_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vel(), output);
  }
  
  // optional double damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->damage(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .Eaagles.Recorder.Pb.Vector pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pos(), target);
  }
  
  // required .Eaagles.Recorder.Pb.Vector angles = 2;
  if (has_angles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->angles(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector vel = 3;
  if (has_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vel(), target);
  }
  
  // optional double damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->damage(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerState::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .Eaagles.Recorder.Pb.Vector pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }
    
    // required .Eaagles.Recorder.Pb.Vector angles = 2;
    if (has_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->angles());
    }
    
    // optional .Eaagles.Recorder.Pb.Vector vel = 3;
    if (has_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vel());
    }
    
    // optional double damage = 4;
    if (has_damage()) {
      total_size += 1 + 8;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerState::MergeFrom(const PlayerState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      mutable_pos()->::Eaagles::Recorder::Pb::Vector::MergeFrom(from.pos());
    }
    if (from.has_angles()) {
      mutable_angles()->::Eaagles::Recorder::Pb::Vector::MergeFrom(from.angles());
    }
    if (from.has_vel()) {
      mutable_vel()->::Eaagles::Recorder::Pb::Vector::MergeFrom(from.vel());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerState::CopyFrom(const PlayerState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  if (has_angles()) {
    if (!this->angles().IsInitialized()) return false;
  }
  if (has_vel()) {
    if (!this->vel().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void PlayerState::Swap(PlayerState* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    std::swap(angles_, other->angles_);
    std::swap(vel_, other->vel_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata PlayerState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerState_descriptor_;
  metadata.reflection = PlayerState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackData::kTypeFieldNumber;
const int TrackData::kQualityFieldNumber;
const int TrackData::kTrueAzFieldNumber;
const int TrackData::kRelAzFieldNumber;
const int TrackData::kElevationFieldNumber;
const int TrackData::kRangeFieldNumber;
const int TrackData::kLatitudeFieldNumber;
const int TrackData::kLongitudeFieldNumber;
const int TrackData::kAltitudeFieldNumber;
const int TrackData::kPositionFieldNumber;
const int TrackData::kVelocityFieldNumber;
const int TrackData::kAvgSignalFieldNumber;
const int TrackData::kSlIndexFieldNumber;
const int TrackData::kWpnRelFieldNumber;
#endif  // !_MSC_VER

TrackData::TrackData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackData::InitAsDefaultInstance() {
  position_ = const_cast< ::Eaagles::Recorder::Pb::Vector*>(&::Eaagles::Recorder::Pb::Vector::default_instance());
  velocity_ = const_cast< ::Eaagles::Recorder::Pb::Vector*>(&::Eaagles::Recorder::Pb::Vector::default_instance());
}

TrackData::TrackData(const TrackData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackData::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  quality_ = 0;
  true_az_ = 0;
  rel_az_ = 0;
  elevation_ = 0;
  range_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  altitude_ = 0;
  position_ = NULL;
  velocity_ = NULL;
  avg_signal_ = 0;
  sl_index_ = 0u;
  wpn_rel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackData::~TrackData() {
  SharedDtor();
}

void TrackData::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void TrackData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackData_descriptor_;
}

const TrackData& TrackData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

TrackData* TrackData::default_instance_ = NULL;

TrackData* TrackData::New() const {
  return new TrackData;
}

void TrackData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    quality_ = 0;
    true_az_ = 0;
    rel_az_ = 0;
    elevation_ = 0;
    range_ = 0;
    latitude_ = 0;
    longitude_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    altitude_ = 0;
    if (has_position()) {
      if (position_ != NULL) position_->::Eaagles::Recorder::Pb::Vector::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::Eaagles::Recorder::Pb::Vector::Clear();
    }
    avg_signal_ = 0;
    sl_index_ = 0u;
    wpn_rel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_quality;
        break;
      }
      
      // optional double quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_true_az;
        break;
      }
      
      // optional double true_az = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_true_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &true_az_)));
          set_has_true_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_rel_az;
        break;
      }
      
      // optional double rel_az = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rel_az:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rel_az_)));
          set_has_rel_az();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_elevation;
        break;
      }
      
      // optional double elevation = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_)));
          set_has_elevation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_range;
        break;
      }
      
      // optional double range = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &range_)));
          set_has_range();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_latitude;
        break;
      }
      
      // optional double latitude = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_longitude;
        break;
      }
      
      // optional double longitude = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_altitude;
        break;
      }
      
      // optional double altitude = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_altitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
          set_has_altitude();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_position;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.Vector position = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_velocity;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.Vector velocity = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_avg_signal;
        break;
      }
      
      // optional double avg_signal = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_avg_signal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &avg_signal_)));
          set_has_avg_signal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sl_index;
        break;
      }
      
      // optional uint32 sl_index = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sl_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sl_index_)));
          set_has_sl_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_wpn_rel;
        break;
      }
      
      // optional bool wpn_rel = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wpn_rel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wpn_rel_)));
          set_has_wpn_rel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // optional double quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->quality(), output);
  }
  
  // optional double true_az = 3;
  if (has_true_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->true_az(), output);
  }
  
  // optional double rel_az = 4;
  if (has_rel_az()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rel_az(), output);
  }
  
  // optional double elevation = 5;
  if (has_elevation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->elevation(), output);
  }
  
  // optional double range = 6;
  if (has_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->range(), output);
  }
  
  // optional double latitude = 7;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->latitude(), output);
  }
  
  // optional double longitude = 8;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->longitude(), output);
  }
  
  // optional double altitude = 9;
  if (has_altitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->altitude(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector position = 10;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->position(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector velocity = 11;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->velocity(), output);
  }
  
  // optional double avg_signal = 12;
  if (has_avg_signal()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->avg_signal(), output);
  }
  
  // optional uint32 sl_index = 13;
  if (has_sl_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->sl_index(), output);
  }
  
  // optional bool wpn_rel = 14;
  if (has_wpn_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->wpn_rel(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // optional double quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->quality(), target);
  }
  
  // optional double true_az = 3;
  if (has_true_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->true_az(), target);
  }
  
  // optional double rel_az = 4;
  if (has_rel_az()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rel_az(), target);
  }
  
  // optional double elevation = 5;
  if (has_elevation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->elevation(), target);
  }
  
  // optional double range = 6;
  if (has_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->range(), target);
  }
  
  // optional double latitude = 7;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->latitude(), target);
  }
  
  // optional double longitude = 8;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->longitude(), target);
  }
  
  // optional double altitude = 9;
  if (has_altitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->altitude(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector position = 10;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->position(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.Vector velocity = 11;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->velocity(), target);
  }
  
  // optional double avg_signal = 12;
  if (has_avg_signal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->avg_signal(), target);
  }
  
  // optional uint32 sl_index = 13;
  if (has_sl_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->sl_index(), target);
  }
  
  // optional bool wpn_rel = 14;
  if (has_wpn_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->wpn_rel(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // optional double quality = 2;
    if (has_quality()) {
      total_size += 1 + 8;
    }
    
    // optional double true_az = 3;
    if (has_true_az()) {
      total_size += 1 + 8;
    }
    
    // optional double rel_az = 4;
    if (has_rel_az()) {
      total_size += 1 + 8;
    }
    
    // optional double elevation = 5;
    if (has_elevation()) {
      total_size += 1 + 8;
    }
    
    // optional double range = 6;
    if (has_range()) {
      total_size += 1 + 8;
    }
    
    // optional double latitude = 7;
    if (has_latitude()) {
      total_size += 1 + 8;
    }
    
    // optional double longitude = 8;
    if (has_longitude()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double altitude = 9;
    if (has_altitude()) {
      total_size += 1 + 8;
    }
    
    // optional .Eaagles.Recorder.Pb.Vector position = 10;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // optional .Eaagles.Recorder.Pb.Vector velocity = 11;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->velocity());
    }
    
    // optional double avg_signal = 12;
    if (has_avg_signal()) {
      total_size += 1 + 8;
    }
    
    // optional uint32 sl_index = 13;
    if (has_sl_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sl_index());
    }
    
    // optional bool wpn_rel = 14;
    if (has_wpn_rel()) {
      total_size += 1 + 1;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackData::MergeFrom(const TrackData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_true_az()) {
      set_true_az(from.true_az());
    }
    if (from.has_rel_az()) {
      set_rel_az(from.rel_az());
    }
    if (from.has_elevation()) {
      set_elevation(from.elevation());
    }
    if (from.has_range()) {
      set_range(from.range());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_altitude()) {
      set_altitude(from.altitude());
    }
    if (from.has_position()) {
      mutable_position()->::Eaagles::Recorder::Pb::Vector::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::Eaagles::Recorder::Pb::Vector::MergeFrom(from.velocity());
    }
    if (from.has_avg_signal()) {
      set_avg_signal(from.avg_signal());
    }
    if (from.has_sl_index()) {
      set_sl_index(from.sl_index());
    }
    if (from.has_wpn_rel()) {
      set_wpn_rel(from.wpn_rel());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackData::CopyFrom(const TrackData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackData::IsInitialized() const {
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity().IsInitialized()) return false;
  }
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void TrackData::Swap(TrackData* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(quality_, other->quality_);
    std::swap(true_az_, other->true_az_);
    std::swap(rel_az_, other->rel_az_);
    std::swap(elevation_, other->elevation_);
    std::swap(range_, other->range_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(altitude_, other->altitude_);
    std::swap(position_, other->position_);
    std::swap(velocity_, other->velocity_);
    std::swap(avg_signal_, other->avg_signal_);
    std::swap(sl_index_, other->sl_index_);
    std::swap(wpn_rel_, other->wpn_rel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata TrackData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackData_descriptor_;
  metadata.reflection = TrackData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* EmissionData_Polarization_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmissionData_Polarization_descriptor_;
}
bool EmissionData_Polarization_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const EmissionData_Polarization EmissionData::NONE;
const EmissionData_Polarization EmissionData::VERTICAL;
const EmissionData_Polarization EmissionData::HORIZONTAL;
const EmissionData_Polarization EmissionData::SLANT;
const EmissionData_Polarization EmissionData::RHC;
const EmissionData_Polarization EmissionData::LHC;
const EmissionData_Polarization EmissionData::Polarization_MIN;
const EmissionData_Polarization EmissionData::Polarization_MAX;
const int EmissionData::Polarization_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int EmissionData::kFrequencyFieldNumber;
const int EmissionData::kWaveLengthFieldNumber;
const int EmissionData::kPulseWidthFieldNumber;
const int EmissionData::kBandwidthFieldNumber;
const int EmissionData::kPrfFieldNumber;
const int EmissionData::kPowerFieldNumber;
const int EmissionData::kPolarizationFieldNumber;
const int EmissionData::kAzimuthAoiFieldNumber;
const int EmissionData::kElevationAoiFieldNumber;
#endif  // !_MSC_VER

EmissionData::EmissionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EmissionData::InitAsDefaultInstance() {
}

EmissionData::EmissionData(const EmissionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EmissionData::SharedCtor() {
  _cached_size_ = 0;
  frequency_ = 0;
  wave_length_ = 0;
  pulse_width_ = 0;
  bandwidth_ = 0;
  prf_ = 0;
  power_ = 0;
  polarization_ = 0;
  azimuth_aoi_ = 0;
  elevation_aoi_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmissionData::~EmissionData() {
  SharedDtor();
}

void EmissionData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmissionData_descriptor_;
}

const EmissionData& EmissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_openeaagles_2frecorder_2fDataRecord_2eproto();  return *default_instance_;
}

EmissionData* EmissionData::default_instance_ = NULL;

EmissionData* EmissionData::New() const {
  return new EmissionData;
}

void EmissionData::Clear() {
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    frequency_ = 0;
    wave_length_ = 0;
    pulse_width_ = 0;
    bandwidth_ = 0;
    prf_ = 0;
    power_ = 0;
    polarization_ = 0;
    azimuth_aoi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    elevation_aoi_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EmissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double frequency = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frequency_)));
          set_has_frequency();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_wave_length;
        break;
      }
      
      // optional double wave_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_wave_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wave_length_)));
          set_has_wave_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_pulse_width;
        break;
      }
      
      // optional double pulse_width = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_pulse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pulse_width_)));
          set_has_pulse_width();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bandwidth;
        break;
      }
      
      // optional double bandwidth = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bandwidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bandwidth_)));
          set_has_bandwidth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_prf;
        break;
      }
      
      // optional double prf = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_prf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &prf_)));
          set_has_prf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_power;
        break;
      }
      
      // optional double power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_polarization;
        break;
      }
      
      // optional .Eaagles.Recorder.Pb.EmissionData.Polarization polarization = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_polarization:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Eaagles::Recorder::Pb::EmissionData_Polarization_IsValid(value)) {
            set_polarization(static_cast< ::Eaagles::Recorder::Pb::EmissionData_Polarization >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_azimuth_aoi;
        break;
      }
      
      // optional double azimuth_aoi = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_azimuth_aoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_aoi_)));
          set_has_azimuth_aoi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_elevation_aoi;
        break;
      }
      
      // optional double elevation_aoi = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_elevation_aoi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &elevation_aoi_)));
          set_has_elevation_aoi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        if ((400u <= tag && tag < 800u) ||
            (800u <= tag && tag < 8000u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EmissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double frequency = 1;
  if (has_frequency()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->frequency(), output);
  }
  
  // optional double wave_length = 2;
  if (has_wave_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wave_length(), output);
  }
  
  // optional double pulse_width = 3;
  if (has_pulse_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pulse_width(), output);
  }
  
  // optional double bandwidth = 4;
  if (has_bandwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bandwidth(), output);
  }
  
  // optional double prf = 5;
  if (has_prf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->prf(), output);
  }
  
  // optional double power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->power(), output);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData.Polarization polarization = 7;
  if (has_polarization()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->polarization(), output);
  }
  
  // optional double azimuth_aoi = 8;
  if (has_azimuth_aoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->azimuth_aoi(), output);
  }
  
  // optional double elevation_aoi = 9;
  if (has_elevation_aoi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->elevation_aoi(), output);
  }
  
  // Extension range [50, 100)
  _extensions_.SerializeWithCachedSizes(
      50, 100, output);
  
  // Extension range [100, 1000)
  _extensions_.SerializeWithCachedSizes(
      100, 1000, output);
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EmissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double frequency = 1;
  if (has_frequency()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->frequency(), target);
  }
  
  // optional double wave_length = 2;
  if (has_wave_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wave_length(), target);
  }
  
  // optional double pulse_width = 3;
  if (has_pulse_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pulse_width(), target);
  }
  
  // optional double bandwidth = 4;
  if (has_bandwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bandwidth(), target);
  }
  
  // optional double prf = 5;
  if (has_prf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->prf(), target);
  }
  
  // optional double power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->power(), target);
  }
  
  // optional .Eaagles.Recorder.Pb.EmissionData.Polarization polarization = 7;
  if (has_polarization()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->polarization(), target);
  }
  
  // optional double azimuth_aoi = 8;
  if (has_azimuth_aoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->azimuth_aoi(), target);
  }
  
  // optional double elevation_aoi = 9;
  if (has_elevation_aoi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->elevation_aoi(), target);
  }
  
  // Extension range [50, 100)
  target = _extensions_.SerializeWithCachedSizesToArray(
      50, 100, target);
  
  // Extension range [100, 1000)
  target = _extensions_.SerializeWithCachedSizesToArray(
      100, 1000, target);
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EmissionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double frequency = 1;
    if (has_frequency()) {
      total_size += 1 + 8;
    }
    
    // optional double wave_length = 2;
    if (has_wave_length()) {
      total_size += 1 + 8;
    }
    
    // optional double pulse_width = 3;
    if (has_pulse_width()) {
      total_size += 1 + 8;
    }
    
    // optional double bandwidth = 4;
    if (has_bandwidth()) {
      total_size += 1 + 8;
    }
    
    // optional double prf = 5;
    if (has_prf()) {
      total_size += 1 + 8;
    }
    
    // optional double power = 6;
    if (has_power()) {
      total_size += 1 + 8;
    }
    
    // optional .Eaagles.Recorder.Pb.EmissionData.Polarization polarization = 7;
    if (has_polarization()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->polarization());
    }
    
    // optional double azimuth_aoi = 8;
    if (has_azimuth_aoi()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double elevation_aoi = 9;
    if (has_elevation_aoi()) {
      total_size += 1 + 8;
    }
    
  }
  total_size += _extensions_.ByteSize();
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EmissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EmissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EmissionData::MergeFrom(const EmissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_frequency()) {
      set_frequency(from.frequency());
    }
    if (from.has_wave_length()) {
      set_wave_length(from.wave_length());
    }
    if (from.has_pulse_width()) {
      set_pulse_width(from.pulse_width());
    }
    if (from.has_bandwidth()) {
      set_bandwidth(from.bandwidth());
    }
    if (from.has_prf()) {
      set_prf(from.prf());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_polarization()) {
      set_polarization(from.polarization());
    }
    if (from.has_azimuth_aoi()) {
      set_azimuth_aoi(from.azimuth_aoi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_elevation_aoi()) {
      set_elevation_aoi(from.elevation_aoi());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EmissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmissionData::CopyFrom(const EmissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmissionData::IsInitialized() const {
  
  
  if (!_extensions_.IsInitialized()) return false;  return true;
}

void EmissionData::Swap(EmissionData* other) {
  if (other != this) {
    std::swap(frequency_, other->frequency_);
    std::swap(wave_length_, other->wave_length_);
    std::swap(pulse_width_, other->pulse_width_);
    std::swap(bandwidth_, other->bandwidth_);
    std::swap(prf_, other->prf_);
    std::swap(power_, other->power_);
    std::swap(polarization_, other->polarization_);
    std::swap(azimuth_aoi_, other->azimuth_aoi_);
    std::swap(elevation_aoi_, other->elevation_aoi_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
    _extensions_.Swap(&other->_extensions_);
  }
}

::google::protobuf::Metadata EmissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmissionData_descriptor_;
  metadata.reflection = EmissionData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pb
}  // namespace Recorder
}  // namespace Eaagles

// @@protoc_insertion_point(global_scope)
